{
	"id": "295a6caef070e37b0c280e7e6bf2428a",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.17",
	"solcLongVersion": "0.5.17+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC1155.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"./SafeMath.sol\";\nimport \"./Address.sol\";\nimport \"./Common.sol\";\nimport \"./IERC1155TokenReceiver.sol\";\nimport \"./IERC1155.sol\";\n\n// A sample implementation of core ERC1155 function.\ncontract ERC1155 is IERC1155, ERC165, CommonConstants\n{\n    using SafeMath for uint256;\n    using Address for address;\n\n    // id => (owner => balance)\n    mapping (uint256 => mapping(address => uint256)) internal balances;\n\n    // owner => (operator => approved)\n    mapping (address => mapping(address => bool)) internal operatorApproval;\n\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\n\n    /*\n        bytes4(keccak256('supportsInterface(bytes4)'));\n    */\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\n\n    /*\n        bytes4(keccak256(\"safeTransferFrom(address,address,uint256,uint256,bytes)\")) ^\n        bytes4(keccak256(\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\")) ^\n        bytes4(keccak256(\"balanceOf(address,uint256)\")) ^\n        bytes4(keccak256(\"balanceOfBatch(address[],uint256[])\")) ^\n        bytes4(keccak256(\"setApprovalForAll(address,bool)\")) ^\n        bytes4(keccak256(\"isApprovedForAll(address,address)\"));\n    */\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\n\n    function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    returns (bool) {\n         if (_interfaceId == INTERFACE_SIGNATURE_ERC165 ||\n             _interfaceId == INTERFACE_SIGNATURE_ERC1155) {\n            return true;\n         }\n\n         return false;\n    }\n\n/////////////////////////////////////////// ERC1155 //////////////////////////////////////////////\n\n    /**\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n        MUST revert on any other error.\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _id      ID of the token type\n        @param _value   Transfer amount\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {\n\n        require(_to != address(0x0), \"_to must be non-zero.\");\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \"Need operator approval for 3rd party transfers.\");\n\n        // SafeMath will throw with insuficient funds _from\n        // or if _id is not valid (balance will be 0)\n        balances[_id][_from] = balances[_id][_from].sub(_value);\n        balances[_id][_to]   = _value.add(balances[_id][_to]);\n\n        // MUST emit event\n        emit TransferSingle(msg.sender, _from, _to, _id, _value);\n\n        // Now that the balance is updated and the event was emitted,\n        // call onERC1155Received if the destination is a contract.\n        if (_to.isContract()) {\n            _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data);\n        }\n    }\n\n    /**\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if length of `_ids` is not the same as length of `_values`.\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _ids     IDs of each token type (order and length must match _values array)\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n    */\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {\n\n        // MUST Throw on errors\n        require(_to != address(0x0), \"destination address must be non-zero.\");\n        require(_ids.length == _values.length, \"_ids and _values array length must match.\");\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \"Need operator approval for 3rd party transfers.\");\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            uint256 id = _ids[i];\n            uint256 value = _values[i];\n\n            // SafeMath will throw with insuficient funds _from\n            // or if _id is not valid (balance will be 0)\n            balances[id][_from] = balances[id][_from].sub(value);\n            balances[id][_to]   = value.add(balances[id][_to]);\n        }\n\n        // Note: instead of the below batch versions of event and acceptance check you MAY have emitted a TransferSingle\n        // event and a subsequent call to _doSafeTransferAcceptanceCheck in above loop for each balance change instead.\n        // Or emitted a TransferSingle event for each in the loop and then the single _doSafeBatchTransferAcceptanceCheck below.\n        // However it is implemented the balance changes and events MUST match when a check (i.e. calling an external contract) is done.\n\n        // MUST emit event\n        emit TransferBatch(msg.sender, _from, _to, _ids, _values);\n\n        // Now that the balances are updated and the events are emitted,\n        // call onERC1155BatchReceived if the destination is a contract.\n        if (_to.isContract()) {\n            _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data);\n        }\n    }\n\n    /**\n        @notice Get the balance of an account's Tokens.\n        @param _owner  The address of the token holder\n        @param _id     ID of the Token\n        @return        The _owner's balance of the Token type requested\n     */\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256) {\n        // The balance of any account can be calculated from the Transfer events history.\n        // However, since we need to keep the balances to validate transfer request,\n        // there is no extra cost to also privide a querry function.\n        return balances[_id][_owner];\n    }\n\n\n    /**\n        @notice Get the balance of multiple account/token pairs\n        @param _owners The addresses of the token holders\n        @param _ids    ID of the Tokens\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n     */\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {\n\n        require(_owners.length == _ids.length);\n\n        uint256[] memory balances_ = new uint256[](_owners.length);\n\n        for (uint256 i = 0; i < _owners.length; ++i) {\n            balances_[i] = balances[_ids[i]][_owners[i]];\n        }\n\n        return balances_;\n    }\n\n    /**\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n        @dev MUST emit the ApprovalForAll event on success.\n        @param _operator  Address to add to the set of authorized operators\n        @param _approved  True if the operator is approved, false to revoke approval\n    */\n    function setApprovalForAll(address _operator, bool _approved) external {\n        operatorApproval[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /**\n        @notice Queries the approval status of an operator for a given owner.\n        @param _owner     The owner of the Tokens\n        @param _operator  Address of authorized operator\n        @return           True if the operator is approved, false if not\n    */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorApproval[_owner][_operator];\n    }\n\n/////////////////////////////////////////// Internal //////////////////////////////////////////////\n\n    function _doSafeTransferAcceptanceCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) internal {\n\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn't a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\n\n\n        // Note: if the below reverts in the onERC1155Received function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_ACCEPTED test.\n        require(ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED, \"contract returned an unknown value from onERC1155Received\");\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) internal {\n\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn't a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\n\n        // Note: if the below reverts in the onERC1155BatchReceived function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_BATCH_ACCEPTED test.\n        require(ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED, \"contract returned an unknown value from onERC1155BatchReceived\");\n    }\n}\n"
			},
			"contracts/IERC1155.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"./ERC165.sol\";\n\n/**\n    @title ERC-1155 Multi Token Standard\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\n */\ninterface IERC1155 /* is ERC165 */ {\n    /**\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n        The `_operator` argument MUST be msg.sender.\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\n        The `_id` argument MUST be the token type being transferred.\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n    */\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n\n    /**\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\n        The `_operator` argument MUST be msg.sender.\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\n        The `_ids` argument MUST be the list of tokens being transferred.\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\n    */\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n\n    /**\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\n    */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n        @dev MUST emit when the URI is updated for a token ID.\n        URIs are defined in RFC 3986.\n        The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".\n    */\n    event URI(string _value, uint256 indexed _id);\n\n    /**\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n        MUST revert on any other error.\n        MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _id      ID of the token type\n        @param _value   Transfer amount\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n\n    /**\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\n        MUST revert if `_to` is the zero address.\n        MUST revert if length of `_ids` is not the same as length of `_values`.\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n        MUST revert on any other error.\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n        @param _from    Source address\n        @param _to      Target address\n        @param _ids     IDs of each token type (order and length must match _values array)\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n    */\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n\n    /**\n        @notice Get the balance of an account's Tokens.\n        @param _owner  The address of the token holder\n        @param _id     ID of the Token\n        @return        The _owner's balance of the Token type requested\n     */\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n    /**\n        @notice Get the balance of multiple account/token pairs\n        @param _owners The addresses of the token holders\n        @param _ids    ID of the Tokens\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n     */\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n\n    /**\n        @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n        @dev MUST emit the ApprovalForAll event on success.\n        @param _operator  Address to add to the set of authorized operators\n        @param _approved  True if the operator is approved, false to revoke approval\n    */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n        @notice Queries the approval status of an operator for a given owner.\n        @param _owner     The owner of the Tokens\n        @param _operator  Address of authorized operator\n        @return           True if the operator is approved, false if not\n    */\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n"
			},
			"contracts/IERC1155TokenReceiver.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n*/\ninterface ERC1155TokenReceiver {\n    /**\n        @notice Handle the receipt of a single ERC1155 token type.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n        This function MUST revert if it rejects the transfer.\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _id        The ID of the token being transferred\n        @param _value     The amount of tokens being transferred\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    */\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\n\n    /**\n        @notice Handle the receipt of multiple ERC1155 token types.\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n        This function MUST revert if it rejects the transfer(s).\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n        @param _from      The address which previously owned the token\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n        @param _data      Additional data with no specified format\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n    */\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\n}\n"
			},
			"contracts/Common.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/**\n    Note: Simple contract to use as base for const vals\n*/\ncontract CommonConstants {\n\n    bytes4 constant internal ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\n    bytes4 constant internal ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n}\n"
			},
			"contracts/Address.sol": {
				"content": "pragma solidity ^0.5.0;\n\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n}\n"
			},
			"contracts/SafeMath.sol": {
				"content": "pragma solidity ^0.5.0;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n"
			},
			"contracts/ERC165.sol": {
				"content": "pragma solidity ^0.5.0;\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas.\n     */\n    function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/Address.sol\":86:1092  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Address.sol\":86:1092  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a72315820b1c6fe98b7df48811639a4f33bf7c852fc57cafa99badb1500ece05fb8cd265f64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b1c6fe98b7df48811639a4f33bf7c852fc57cafa99badb1500ece05fb8cd265f64736f6c63430005110032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB1 0xC6 INVALID SWAP9 0xB7 0xDF 0x48 DUP2 AND CODECOPY LOG4 RETURN EXTCODESIZE 0xF7 0xC8 MSTORE 0xFC JUMPI 0xCA STATICCALL SWAP10 0xBA 0xDB ISZERO STOP 0xEC 0xE0 0x5F 0xB8 0xCD 0x26 0x5F PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "86:1006:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820b1c6fe98b7df48811639a4f33bf7c852fc57cafa99badb1500ece05fb8cd265f64736f6c63430005110032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xB1 0xC6 INVALID SWAP9 0xB7 0xDF 0x48 DUP2 AND CODECOPY LOG4 RETURN EXTCODESIZE 0xF7 0xC8 MSTORE 0xFC JUMPI 0xCA STATICCALL SWAP10 0xBA 0xDB ISZERO STOP 0xEC 0xE0 0x5F 0xB8 0xCD 0x26 0x5F PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "86:1006:0:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"isContract(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 86,
									"end": 1092,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 86,
									"end": 1092,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820b1c6fe98b7df48811639a4f33bf7c852fc57cafa99badb1500ece05fb8cd265f64736f6c63430005110032",
									".code": [
										{
											"begin": 86,
											"end": 1092,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "ADDRESS"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "EQ"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "MSTORE"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "DUP1"
										},
										{
											"begin": 86,
											"end": 1092,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"Utility library of inline functions on addresses\"}},\"settings\":{\"compilationTarget\":{\"contracts/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0x016260fe1d6f563acefd8adb335b05e569b4026e3f8d472c3e855412debb83de\",\"urls\":[\"bzz-raw://701be90d29a315d87757399639b99315e37db64fd8e2157b27888061edebb7ca\",\"dweb:/ipfs/QmfLFj4eVtsF3V3LaxyKe6ZaGkwpR8ip1NV44WaHQ3BV1g\"]}},\"version\":1}",
					"userdoc": {
						"methods": {},
						"notice": "Utility library of inline functions on addresses"
					}
				}
			},
			"contracts/Common.sol": {
				"CommonConstants": {
					"abi": [],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/Common.sol\":88:414  contract CommonConstants {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Common.sol\":88:414  contract CommonConstants {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Common.sol\":88:414  contract CommonConstants {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a723158202f8055ae4393852904d6e2d6af8c7eb46412ad8d7a12ca1031f9fcaaac0b4dcc64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158202f8055ae4393852904d6e2d6af8c7eb46412ad8d7a12ca1031f9fcaaac0b4dcc64736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x2F DUP1 SSTORE 0xAE NUMBER SWAP4 DUP6 0x29 DIV 0xD6 0xE2 0xD6 0xAF DUP13 PUSH31 0xB46412AD8D7A12CA1031F9FCAAAC0B4DCC64736F6C63430005110032000000 ",
							"sourceMap": "88:326:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;88:326:1;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600080fdfea265627a7a723158202f8055ae4393852904d6e2d6af8c7eb46412ad8d7a12ca1031f9fcaaac0b4dcc64736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x2F DUP1 SSTORE 0xAE NUMBER SWAP4 DUP6 0x29 DIV 0xD6 0xE2 0xD6 0xAF DUP13 PUSH31 0xB46412AD8D7A12CA1031F9FCAAAC0B4DCC64736F6C63430005110032000000 ",
							"sourceMap": "88:326:1:-;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "66",
								"totalCost": "12466"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 88,
									"end": 414,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "MSTORE"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "POP"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "DUP1"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "CODECOPY"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 88,
									"end": 414,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158202f8055ae4393852904d6e2d6af8c7eb46412ad8d7a12ca1031f9fcaaac0b4dcc64736f6c63430005110032",
									".code": [
										{
											"begin": 88,
											"end": 414,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 88,
											"end": 414,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 88,
											"end": 414,
											"name": "MSTORE"
										},
										{
											"begin": 88,
											"end": 414,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 88,
											"end": 414,
											"name": "DUP1"
										},
										{
											"begin": 88,
											"end": 414,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"Note: Simple contract to use as base for const vals\"}},\"settings\":{\"compilationTarget\":{\"contracts/Common.sol\":\"CommonConstants\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Common.sol\":{\"keccak256\":\"0x900d50cdfedbcf60e9e1ef727674ead98b35abf5a01714ed285989d410c01db8\",\"urls\":[\"bzz-raw://9903b443608607b5f94e85f77d35528baf9adb8c7acc70bc0818437a251f4c8b\",\"dweb:/ipfs/QmRHVoDnjh7ihKZJCXbsVwMEodGEtKBE1wJcvxqkqec2R2\"]}},\"version\":1}",
					"userdoc": {
						"methods": {},
						"notice": "Note: Simple contract to use as base for const vals"
					}
				}
			},
			"contracts/ERC1155.sol": {
				"ERC1155": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "_values",
									"type": "uint256[]"
								}
							],
							"name": "TransferBatch",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "TransferSingle",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "_value",
									"type": "string"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								}
							],
							"name": "URI",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_owners",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								}
							],
							"name": "balanceOfBatch",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_values",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeBatchTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "_interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {
							"balanceOf(address,uint256)": {
								"params": {
									"_id": "ID of the Token",
									"_owner": "The address of the token holder"
								},
								"return": "The _owner's balance of the Token type requested"
							},
							"balanceOfBatch(address[],uint256[])": {
								"params": {
									"_ids": "ID of the Tokens",
									"_owners": "The addresses of the token holders"
								},
								"return": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
							},
							"isApprovedForAll(address,address)": {
								"params": {
									"_operator": "Address of authorized operator",
									"_owner": "The owner of the Tokens"
								},
								"return": "True if the operator is approved, false if not"
							},
							"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
								"details": "Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error. MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).",
								"params": {
									"_data": "Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`",
									"_from": "Source address",
									"_ids": "IDs of each token type (order and length must match _values array)",
									"_to": "Target address",
									"_values": "Transfer amounts per token type (order and length must match _ids array)"
								}
							},
							"safeTransferFrom(address,address,uint256,uint256,bytes)": {
								"details": "Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).",
								"params": {
									"_data": "Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`",
									"_from": "Source address",
									"_id": "ID of the token type",
									"_to": "Target address",
									"_value": "Transfer amount"
								}
							},
							"setApprovalForAll(address,bool)": {
								"details": "MUST emit the ApprovalForAll event on success.",
								"params": {
									"_approved": "True if the operator is approved, false to revoke approval",
									"_operator": "Address to add to the set of authorized operators"
								}
							}
						}
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC1155.sol\":214:11871  contract ERC1155 is IERC1155, ERC165, CommonConstants... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ERC1155.sol\":214:11871  contract ERC1155 is IERC1155, ERC165, CommonConstants... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC1155.sol\":214:11871  contract ERC1155 is IERC1155, ERC165, CommonConstants... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/ERC1155.sol\":214:11871  contract ERC1155 is IERC1155, ERC165, CommonConstants... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x4e1273f4\n      gt\n      tag_10\n      jumpi\n      dup1\n      0x4e1273f4\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xf242432a\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_10:\n      dup1\n      0xfdd58e\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x01ffc9a7\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x2eb2c2d6\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ERC1155.sol\":7401:7770  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n    tag_3:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_12\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_12:\n        /* \"contracts/ERC1155.sol\":7401:7770  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_13\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC1155.sol\":1319:1592  function supportsInterface(bytes4 _interfaceId)... */\n    tag_4:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_15\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_15:\n        /* \"contracts/ERC1155.sol\":1319:1592  function supportsInterface(bytes4 _interfaceId)... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_16\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n    tag_5:\n      tag_17\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:16   */\n      0xa0\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:17   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_18\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_18:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_19\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_19:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_20\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_20:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":101:110   */\n      dup5\n        /* \"--CODEGEN--\":95:97   */\n      0x20\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:98   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:99   */\n      add\n        /* \"--CODEGEN--\":60:111   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:119   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_21\n      jumpi\n        /* \"--CODEGEN--\":132:133   */\n      0x00\n        /* \"--CODEGEN--\":129:130   */\n      dup1\n        /* \"--CODEGEN--\":122:134   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_21:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_22:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_23\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_23:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":101:110   */\n      dup5\n        /* \"--CODEGEN--\":95:97   */\n      0x20\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:98   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:99   */\n      add\n        /* \"--CODEGEN--\":60:111   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:119   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":132:133   */\n      0x00\n        /* \"--CODEGEN--\":129:130   */\n      dup1\n        /* \"--CODEGEN--\":122:134   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_24:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_25\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_25:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_26\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_26:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":100:109   */\n      dup5\n        /* \"--CODEGEN--\":95:96   */\n      0x01\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:97   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:98   */\n      add\n        /* \"--CODEGEN--\":60:110   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:118   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_27\n      jumpi\n        /* \"--CODEGEN--\":131:132   */\n      0x00\n        /* \"--CODEGEN--\":128:129   */\n      dup1\n        /* \"--CODEGEN--\":121:133   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_27:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_30\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_30:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_31\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_31:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_32\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_32:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":101:110   */\n      dup5\n        /* \"--CODEGEN--\":95:97   */\n      0x20\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:98   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:99   */\n      add\n        /* \"--CODEGEN--\":60:111   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:119   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_33\n      jumpi\n        /* \"--CODEGEN--\":132:133   */\n      0x00\n        /* \"--CODEGEN--\":129:130   */\n      dup1\n        /* \"--CODEGEN--\":122:134   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_33:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_34\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_34:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_35\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_35:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":101:110   */\n      dup5\n        /* \"--CODEGEN--\":95:97   */\n      0x20\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:98   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:99   */\n      add\n        /* \"--CODEGEN--\":60:111   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:119   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_36\n      jumpi\n        /* \"--CODEGEN--\":132:133   */\n      0x00\n        /* \"--CODEGEN--\":129:130   */\n      dup1\n        /* \"--CODEGEN--\":122:134   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_36:\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      pop\n      pop\n      pop\n      tag_37\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_38:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_40\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_38)\n    tag_40:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC1155.sol\":8817:9019  function setApprovalForAll(address _operator, bool _approved) external {... */\n    tag_7:\n      tag_41\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_42\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_42:\n        /* \"contracts/ERC1155.sol\":8817:9019  function setApprovalForAll(address _operator, bool _approved) external {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      iszero\n      iszero\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_43\n      jump\t// in\n    tag_41:\n      stop\n        /* \"contracts/ERC1155.sol\":9298:9447  function isApprovedForAll(address _owner, address _operator) external view returns (bool) {... */\n    tag_8:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_45\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_45:\n        /* \"contracts/ERC1155.sol\":9298:9447  function isApprovedForAll(address _owner, address _operator) external view returns (bool) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_46\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n    tag_9:\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:16   */\n      0xa0\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:17   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_48\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_48:\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_49\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_49:\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_50\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_50:\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":100:109   */\n      dup5\n        /* \"--CODEGEN--\":95:96   */\n      0x01\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:97   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:98   */\n      add\n        /* \"--CODEGEN--\":60:110   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:118   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_51\n      jumpi\n        /* \"--CODEGEN--\":131:132   */\n      0x00\n        /* \"--CODEGEN--\":128:129   */\n      dup1\n        /* \"--CODEGEN--\":121:133   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_51:\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      pop\n      pop\n      pop\n      tag_52\n      jump\t// in\n    tag_47:\n      stop\n        /* \"contracts/ERC1155.sol\":7401:7770  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n    tag_13:\n        /* \"contracts/ERC1155.sol\":7472:7479  uint256 */\n      0x00\n        /* \"contracts/ERC1155.sol\":7742:7750  balances */\n      dup1\n        /* \"contracts/ERC1155.sol\":7742:7755  balances[_id] */\n      0x00\n        /* \"contracts/ERC1155.sol\":7751:7754  _id */\n      dup4\n        /* \"contracts/ERC1155.sol\":7742:7755  balances[_id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":7742:7763  balances[_id][_owner] */\n      0x00\n        /* \"contracts/ERC1155.sol\":7756:7762  _owner */\n      dup5\n        /* \"contracts/ERC1155.sol\":7742:7763  balances[_id][_owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC1155.sol\":7735:7763  return balances[_id][_owner] */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":7401:7770  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":1319:1592  function supportsInterface(bytes4 _interfaceId)... */\n    tag_16:\n        /* \"contracts/ERC1155.sol\":1400:1404  bool */\n      0x00\n        /* \"contracts/ERC1155.sol\":782:792  0x01ffc9a7 */\n      0x01ffc9a7\n        /* \"contracts/ERC1155.sol\":1437:1463  INTERFACE_SIGNATURE_ERC165 */\n      0xe0\n      shl\n        /* \"contracts/ERC1155.sol\":1421:1463  _interfaceId == INTERFACE_SIGNATURE_ERC165 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC1155.sol\":1421:1433  _interfaceId */\n      dup3\n        /* \"contracts/ERC1155.sol\":1421:1463  _interfaceId == INTERFACE_SIGNATURE_ERC165 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC1155.sol\":1421:1523  _interfaceId == INTERFACE_SIGNATURE_ERC165 ||... */\n      dup1\n      tag_55\n      jumpi\n      pop\n        /* \"contracts/ERC1155.sol\":1302:1312  0xd9b67a26 */\n      0xd9b67a26\n        /* \"contracts/ERC1155.sol\":1496:1523  INTERFACE_SIGNATURE_ERC1155 */\n      0xe0\n      shl\n        /* \"contracts/ERC1155.sol\":1480:1523  _interfaceId == INTERFACE_SIGNATURE_ERC1155 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC1155.sol\":1480:1492  _interfaceId */\n      dup3\n        /* \"contracts/ERC1155.sol\":1480:1523  _interfaceId == INTERFACE_SIGNATURE_ERC1155 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC1155.sol\":1421:1523  _interfaceId == INTERFACE_SIGNATURE_ERC165 ||... */\n    tag_55:\n        /* \"contracts/ERC1155.sol\":1417:1562  if (_interfaceId == INTERFACE_SIGNATURE_ERC165 ||... */\n      iszero\n      tag_56\n      jumpi\n        /* \"contracts/ERC1155.sol\":1546:1550  true */\n      0x01\n        /* \"contracts/ERC1155.sol\":1539:1550  return true */\n      swap1\n      pop\n      jump(tag_54)\n        /* \"contracts/ERC1155.sol\":1417:1562  if (_interfaceId == INTERFACE_SIGNATURE_ERC165 ||... */\n    tag_56:\n        /* \"contracts/ERC1155.sol\":1580:1585  false */\n      0x00\n        /* \"contracts/ERC1155.sol\":1573:1585  return false */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":1319:1592  function supportsInterface(bytes4 _interfaceId)... */\n    tag_54:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n    tag_28:\n        /* \"contracts/ERC1155.sol\":5598:5601  0x0 */\n      0x00\n        /* \"contracts/ERC1155.sol\":5583:5602  _to != address(0x0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":5583:5586  _to */\n      dup8\n        /* \"contracts/ERC1155.sol\":5583:5602  _to != address(0x0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/ERC1155.sol\":5575:5644  require(_to != address(0x0), \"destination address must be non-zero.\") */\n      tag_58\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_62feaa226fe2bab79230d856b8132c73f9553fb9f97b507f32473583a3bdc412\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_58:\n        /* \"contracts/ERC1155.sol\":5677:5684  _values */\n      dup4\n      dup4\n        /* \"contracts/ERC1155.sol\":5677:5691  _values.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":5662:5666  _ids */\n      dup7\n      dup7\n        /* \"contracts/ERC1155.sol\":5662:5673  _ids.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":5662:5691  _ids.length == _values.length */\n      eq\n        /* \"contracts/ERC1155.sol\":5654:5737  require(_ids.length == _values.length, \"_ids and _values array length must match.\") */\n      tag_59\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_d06b0e7fc248df96a03d3f6210ab25cdbd58ba1e3989c7aed9df538ab45fc969\n      0x29\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_59:\n        /* \"contracts/ERC1155.sol\":5764:5774  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":5755:5774  _from == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":5755:5760  _from */\n      dup9\n        /* \"contracts/ERC1155.sol\":5755:5774  _from == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC1155.sol\":5755:5821  _from == msg.sender || operatorApproval[_from][msg.sender] == true */\n      dup1\n      tag_60\n      jumpi\n      pop\n        /* \"contracts/ERC1155.sol\":5817:5821  true */\n      0x01\n        /* \"contracts/ERC1155.sol\":5778:5821  operatorApproval[_from][msg.sender] == true */\n      iszero\n      iszero\n        /* \"contracts/ERC1155.sol\":5778:5794  operatorApproval */\n      0x01\n        /* \"contracts/ERC1155.sol\":5778:5801  operatorApproval[_from] */\n      0x00\n        /* \"contracts/ERC1155.sol\":5795:5800  _from */\n      dup11\n        /* \"contracts/ERC1155.sol\":5778:5801  operatorApproval[_from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":5778:5813  operatorApproval[_from][msg.sender] */\n      0x00\n        /* \"contracts/ERC1155.sol\":5802:5812  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":5778:5813  operatorApproval[_from][msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC1155.sol\":5778:5821  operatorApproval[_from][msg.sender] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/ERC1155.sol\":5755:5821  _from == msg.sender || operatorApproval[_from][msg.sender] == true */\n    tag_60:\n        /* \"contracts/ERC1155.sol\":5747:5873  require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \"Need operator approval for 3rd party transfers.\") */\n      tag_61\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be\n      0x2f\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_61:\n        /* \"contracts/ERC1155.sol\":5889:5898  uint256 i */\n      0x00\n        /* \"contracts/ERC1155.sol\":5901:5902  0 */\n      dup1\n        /* \"contracts/ERC1155.sol\":5889:5902  uint256 i = 0 */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":5884:6264  for (uint256 i = 0; i < _ids.length; ++i) {... */\n    tag_62:\n        /* \"contracts/ERC1155.sol\":5908:5912  _ids */\n      dup7\n      dup7\n        /* \"contracts/ERC1155.sol\":5908:5919  _ids.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":5904:5905  i */\n      dup2\n        /* \"contracts/ERC1155.sol\":5904:5919  i < _ids.length */\n      lt\n        /* \"contracts/ERC1155.sol\":5884:6264  for (uint256 i = 0; i < _ids.length; ++i) {... */\n      iszero\n      tag_63\n      jumpi\n        /* \"contracts/ERC1155.sol\":5940:5950  uint256 id */\n      0x00\n        /* \"contracts/ERC1155.sol\":5953:5957  _ids */\n      dup8\n      dup8\n        /* \"contracts/ERC1155.sol\":5958:5959  i */\n      dup4\n        /* \"contracts/ERC1155.sol\":5953:5960  _ids[i] */\n      dup2\n      dup2\n      lt\n      tag_65\n      jumpi\n      invalid\n    tag_65:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      calldataload\n        /* \"contracts/ERC1155.sol\":5940:5960  uint256 id = _ids[i] */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":5974:5987  uint256 value */\n      0x00\n        /* \"contracts/ERC1155.sol\":5990:5997  _values */\n      dup7\n      dup7\n        /* \"contracts/ERC1155.sol\":5998:5999  i */\n      dup5\n        /* \"contracts/ERC1155.sol\":5990:6000  _values[i] */\n      dup2\n      dup2\n      lt\n      tag_66\n      jumpi\n      invalid\n    tag_66:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      calldataload\n        /* \"contracts/ERC1155.sol\":5974:6000  uint256 value = _values[i] */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":6159:6189  balances[id][_from].sub(value) */\n      tag_67\n        /* \"contracts/ERC1155.sol\":6183:6188  value */\n      dup2\n        /* \"contracts/ERC1155.sol\":6159:6167  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":6159:6171  balances[id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":6168:6170  id */\n      dup6\n        /* \"contracts/ERC1155.sol\":6159:6171  balances[id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":6159:6178  balances[id][_from] */\n      0x00\n        /* \"contracts/ERC1155.sol\":6172:6177  _from */\n      dup15\n        /* \"contracts/ERC1155.sol\":6159:6178  balances[id][_from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC1155.sol\":6159:6182  balances[id][_from].sub */\n      tag_68\n      swap1\n        /* \"contracts/ERC1155.sol\":6159:6189  balances[id][_from].sub(value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_67:\n        /* \"contracts/ERC1155.sol\":6137:6145  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":6137:6149  balances[id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":6146:6148  id */\n      dup5\n        /* \"contracts/ERC1155.sol\":6137:6149  balances[id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":6137:6156  balances[id][_from] */\n      0x00\n        /* \"contracts/ERC1155.sol\":6150:6155  _from */\n      dup14\n        /* \"contracts/ERC1155.sol\":6137:6156  balances[id][_from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":6137:6189  balances[id][_from] = balances[id][_from].sub(value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC1155.sol\":6225:6253  value.add(balances[id][_to]) */\n      tag_69\n        /* \"contracts/ERC1155.sol\":6235:6243  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":6235:6247  balances[id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":6244:6246  id */\n      dup5\n        /* \"contracts/ERC1155.sol\":6235:6247  balances[id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":6235:6252  balances[id][_to] */\n      0x00\n        /* \"contracts/ERC1155.sol\":6248:6251  _to */\n      dup13\n        /* \"contracts/ERC1155.sol\":6235:6252  balances[id][_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC1155.sol\":6225:6230  value */\n      dup3\n        /* \"contracts/ERC1155.sol\":6225:6234  value.add */\n      tag_70\n      swap1\n        /* \"contracts/ERC1155.sol\":6225:6253  value.add(balances[id][_to]) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_69:\n        /* \"contracts/ERC1155.sol\":6203:6211  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":6203:6215  balances[id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":6212:6214  id */\n      dup5\n        /* \"contracts/ERC1155.sol\":6203:6215  balances[id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":6203:6220  balances[id][_to] */\n      0x00\n        /* \"contracts/ERC1155.sol\":6216:6219  _to */\n      dup13\n        /* \"contracts/ERC1155.sol\":6203:6220  balances[id][_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":6203:6253  balances[id][_to]   = value.add(balances[id][_to]) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC1155.sol\":5884:6264  for (uint256 i = 0; i < _ids.length; ++i) {... */\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":5921:5924  ++i */\n      dup1\n      0x01\n      add\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":5884:6264  for (uint256 i = 0; i < _ids.length; ++i) {... */\n      jump(tag_62)\n    tag_63:\n      pop\n        /* \"contracts/ERC1155.sol\":6847:6850  _to */\n      dup7\n        /* \"contracts/ERC1155.sol\":6814:6866  TransferBatch(msg.sender, _from, _to, _ids, _values) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":6840:6845  _from */\n      dup9\n        /* \"contracts/ERC1155.sol\":6814:6866  TransferBatch(msg.sender, _from, _to, _ids, _values) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":6828:6838  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":6814:6866  TransferBatch(msg.sender, _from, _to, _ids, _values) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb\n        /* \"contracts/ERC1155.sol\":6852:6856  _ids */\n      dup10\n      dup10\n        /* \"contracts/ERC1155.sol\":6858:6865  _values */\n      dup10\n      dup10\n        /* \"contracts/ERC1155.sol\":6814:6866  TransferBatch(msg.sender, _from, _to, _ids, _values) */\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup4\n      dup2\n      sub\n      dup4\n      mstore\n      dup8\n      dup8\n      dup3\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      0x20\n      mul\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contracts/ERC1155.sol\":6814:6866  TransferBatch(msg.sender, _from, _to, _ids, _values) */\n      pop\n      pop\n      dup4\n      dup2\n      sub\n      dup3\n      mstore\n      dup6\n      dup6\n      dup3\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      0x20\n      mul\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contracts/ERC1155.sol\":6814:6866  TransferBatch(msg.sender, _from, _to, _ids, _values) */\n      pop\n      pop\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"contracts/ERC1155.sol\":7027:7043  _to.isContract() */\n      tag_71\n        /* \"contracts/ERC1155.sol\":7027:7030  _to */\n      dup8\n        /* \"contracts/ERC1155.sol\":7027:7041  _to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_72\n        /* \"contracts/ERC1155.sol\":7027:7043  _to.isContract() */\n      jump\t// in\n    tag_71:\n        /* \"contracts/ERC1155.sol\":7023:7151  if (_to.isContract()) {... */\n      iszero\n      tag_73\n      jumpi\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      tag_74\n        /* \"contracts/ERC1155.sol\":7095:7105  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":7107:7112  _from */\n      dup10\n        /* \"contracts/ERC1155.sol\":7114:7117  _to */\n      dup10\n        /* \"contracts/ERC1155.sol\":7119:7123  _ids */\n      dup10\n      dup10\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":7125:7132  _values */\n      dup9\n      dup9\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":7134:7139  _data */\n      dup8\n      dup8\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":7059:7094  _doSafeBatchTransferAcceptanceCheck */\n      tag_75\n        /* \"contracts/ERC1155.sol\":7059:7140  _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data) */\n      jump\t// in\n    tag_74:\n        /* \"contracts/ERC1155.sol\":7023:7151  if (_to.isContract()) {... */\n    tag_73:\n        /* \"contracts/ERC1155.sol\":5389:7157  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n    tag_37:\n        /* \"contracts/ERC1155.sol\":8169:8185  uint256[] memory */\n      0x60\n        /* \"contracts/ERC1155.sol\":8224:8228  _ids */\n      dup3\n      dup3\n        /* \"contracts/ERC1155.sol\":8224:8235  _ids.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8206:8213  _owners */\n      dup6\n      dup6\n        /* \"contracts/ERC1155.sol\":8206:8220  _owners.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8206:8235  _owners.length == _ids.length */\n      eq\n        /* \"contracts/ERC1155.sol\":8198:8236  require(_owners.length == _ids.length) */\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n        /* \"contracts/ERC1155.sol\":8247:8273  uint256[] memory balances_ */\n      0x60\n        /* \"contracts/ERC1155.sol\":8290:8297  _owners */\n      dup6\n      dup6\n        /* \"contracts/ERC1155.sol\":8290:8304  _owners.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8276:8305  new uint256[](_owners.length) */\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_78\n      jumpi\n      dup2\n      0x20\n      add\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n        /* \"--CODEGEN--\":148:152   */\n      dup1\n        /* \"--CODEGEN--\":140:146   */\n      dup3\n        /* \"--CODEGEN--\":136:153   */\n      add\n        /* \"--CODEGEN--\":126:153   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:157   */\n      pop\n        /* \"contracts/ERC1155.sol\":8276:8305  new uint256[](_owners.length) */\n      swap1\n      pop\n    tag_78:\n      pop\n        /* \"contracts/ERC1155.sol\":8247:8305  uint256[] memory balances_ = new uint256[](_owners.length) */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8321:8330  uint256 i */\n      0x00\n        /* \"contracts/ERC1155.sol\":8333:8334  0 */\n      dup1\n        /* \"contracts/ERC1155.sol\":8321:8334  uint256 i = 0 */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8316:8430  for (uint256 i = 0; i < _owners.length; ++i) {... */\n    tag_79:\n        /* \"contracts/ERC1155.sol\":8340:8347  _owners */\n      dup7\n      dup7\n        /* \"contracts/ERC1155.sol\":8340:8354  _owners.length */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8336:8337  i */\n      dup2\n        /* \"contracts/ERC1155.sol\":8336:8354  i < _owners.length */\n      lt\n        /* \"contracts/ERC1155.sol\":8316:8430  for (uint256 i = 0; i < _owners.length; ++i) {... */\n      iszero\n      tag_80\n      jumpi\n        /* \"contracts/ERC1155.sol\":8390:8398  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":8390:8407  balances[_ids[i]] */\n      dup1\n        /* \"contracts/ERC1155.sol\":8399:8403  _ids */\n      dup7\n      dup7\n        /* \"contracts/ERC1155.sol\":8404:8405  i */\n      dup5\n        /* \"contracts/ERC1155.sol\":8399:8406  _ids[i] */\n      dup2\n      dup2\n      lt\n      tag_82\n      jumpi\n      invalid\n    tag_82:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      calldataload\n        /* \"contracts/ERC1155.sol\":8390:8407  balances[_ids[i]] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":8390:8419  balances[_ids[i]][_owners[i]] */\n      0x00\n        /* \"contracts/ERC1155.sol\":8408:8415  _owners */\n      dup9\n      dup9\n        /* \"contracts/ERC1155.sol\":8416:8417  i */\n      dup5\n        /* \"contracts/ERC1155.sol\":8408:8418  _owners[i] */\n      dup2\n      dup2\n      lt\n      tag_83\n      jumpi\n      invalid\n    tag_83:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":8390:8419  balances[_ids[i]][_owners[i]] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC1155.sol\":8375:8384  balances_ */\n      dup3\n        /* \"contracts/ERC1155.sol\":8385:8386  i */\n      dup3\n        /* \"contracts/ERC1155.sol\":8375:8387  balances_[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_84\n      jumpi\n      invalid\n    tag_84:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"contracts/ERC1155.sol\":8375:8419  balances_[i] = balances[_ids[i]][_owners[i]] */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":8356:8359  ++i */\n      dup1\n      0x01\n      add\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":8316:8430  for (uint256 i = 0; i < _owners.length; ++i) {... */\n      jump(tag_79)\n    tag_80:\n      pop\n        /* \"contracts/ERC1155.sol\":8447:8456  balances_ */\n      dup1\n        /* \"contracts/ERC1155.sol\":8440:8456  return balances_ */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":8069:8463  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":8817:9019  function setApprovalForAll(address _operator, bool _approved) external {... */\n    tag_43:\n        /* \"contracts/ERC1155.sol\":8940:8949  _approved */\n      dup1\n        /* \"contracts/ERC1155.sol\":8898:8914  operatorApproval */\n      0x01\n        /* \"contracts/ERC1155.sol\":8898:8926  operatorApproval[msg.sender] */\n      0x00\n        /* \"contracts/ERC1155.sol\":8915:8925  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":8898:8926  operatorApproval[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":8898:8937  operatorApproval[msg.sender][_operator] */\n      0x00\n        /* \"contracts/ERC1155.sol\":8927:8936  _operator */\n      dup5\n        /* \"contracts/ERC1155.sol\":8898:8937  operatorApproval[msg.sender][_operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/ERC1155.sol\":8898:8949  operatorApproval[msg.sender][_operator] = _approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC1155.sol\":8991:9000  _operator */\n      dup2\n        /* \"contracts/ERC1155.sol\":8964:9012  ApprovalForAll(msg.sender, _operator, _approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":8979:8989  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":8964:9012  ApprovalForAll(msg.sender, _operator, _approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \"contracts/ERC1155.sol\":9002:9011  _approved */\n      dup4\n        /* \"contracts/ERC1155.sol\":8964:9012  ApprovalForAll(msg.sender, _operator, _approved) */\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/ERC1155.sol\":8817:9019  function setApprovalForAll(address _operator, bool _approved) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":9298:9447  function isApprovedForAll(address _owner, address _operator) external view returns (bool) {... */\n    tag_46:\n        /* \"contracts/ERC1155.sol\":9382:9386  bool */\n      0x00\n        /* \"contracts/ERC1155.sol\":9405:9421  operatorApproval */\n      0x01\n        /* \"contracts/ERC1155.sol\":9405:9429  operatorApproval[_owner] */\n      0x00\n        /* \"contracts/ERC1155.sol\":9422:9428  _owner */\n      dup5\n        /* \"contracts/ERC1155.sol\":9405:9429  operatorApproval[_owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":9405:9440  operatorApproval[_owner][_operator] */\n      0x00\n        /* \"contracts/ERC1155.sol\":9430:9439  _operator */\n      dup4\n        /* \"contracts/ERC1155.sol\":9405:9440  operatorApproval[_owner][_operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC1155.sol\":9398:9440  return operatorApproval[_owner][_operator] */\n      swap1\n      pop\n        /* \"contracts/ERC1155.sol\":9298:9447  function isApprovedForAll(address _owner, address _operator) external view returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n    tag_52:\n        /* \"contracts/ERC1155.sol\":2980:2983  0x0 */\n      0x00\n        /* \"contracts/ERC1155.sol\":2965:2984  _to != address(0x0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":2965:2968  _to */\n      dup6\n        /* \"contracts/ERC1155.sol\":2965:2984  _to != address(0x0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"contracts/ERC1155.sol\":2957:3010  require(_to != address(0x0), \"_to must be non-zero.\") */\n      tag_88\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x15\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5f746f206d757374206265206e6f6e2d7a65726f2e0000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_88:\n        /* \"contracts/ERC1155.sol\":3037:3047  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":3028:3047  _from == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":3028:3033  _from */\n      dup7\n        /* \"contracts/ERC1155.sol\":3028:3047  _from == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC1155.sol\":3028:3094  _from == msg.sender || operatorApproval[_from][msg.sender] == true */\n      dup1\n      tag_89\n      jumpi\n      pop\n        /* \"contracts/ERC1155.sol\":3090:3094  true */\n      0x01\n        /* \"contracts/ERC1155.sol\":3051:3094  operatorApproval[_from][msg.sender] == true */\n      iszero\n      iszero\n        /* \"contracts/ERC1155.sol\":3051:3067  operatorApproval */\n      0x01\n        /* \"contracts/ERC1155.sol\":3051:3074  operatorApproval[_from] */\n      0x00\n        /* \"contracts/ERC1155.sol\":3068:3073  _from */\n      dup9\n        /* \"contracts/ERC1155.sol\":3051:3074  operatorApproval[_from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3051:3086  operatorApproval[_from][msg.sender] */\n      0x00\n        /* \"contracts/ERC1155.sol\":3075:3085  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":3051:3086  operatorApproval[_from][msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC1155.sol\":3051:3094  operatorApproval[_from][msg.sender] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/ERC1155.sol\":3028:3094  _from == msg.sender || operatorApproval[_from][msg.sender] == true */\n    tag_89:\n        /* \"contracts/ERC1155.sol\":3020:3146  require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \"Need operator approval for 3rd party transfers.\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be\n      0x2f\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_90:\n        /* \"contracts/ERC1155.sol\":3294:3326  balances[_id][_from].sub(_value) */\n      tag_91\n        /* \"contracts/ERC1155.sol\":3319:3325  _value */\n      dup4\n        /* \"contracts/ERC1155.sol\":3294:3302  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":3294:3307  balances[_id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":3303:3306  _id */\n      dup8\n        /* \"contracts/ERC1155.sol\":3294:3307  balances[_id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3294:3314  balances[_id][_from] */\n      0x00\n        /* \"contracts/ERC1155.sol\":3308:3313  _from */\n      dup10\n        /* \"contracts/ERC1155.sol\":3294:3314  balances[_id][_from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC1155.sol\":3294:3318  balances[_id][_from].sub */\n      tag_68\n      swap1\n        /* \"contracts/ERC1155.sol\":3294:3326  balances[_id][_from].sub(_value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_91:\n        /* \"contracts/ERC1155.sol\":3271:3279  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":3271:3284  balances[_id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":3280:3283  _id */\n      dup7\n        /* \"contracts/ERC1155.sol\":3271:3284  balances[_id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3271:3291  balances[_id][_from] */\n      0x00\n        /* \"contracts/ERC1155.sol\":3285:3290  _from */\n      dup9\n        /* \"contracts/ERC1155.sol\":3271:3291  balances[_id][_from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3271:3326  balances[_id][_from] = balances[_id][_from].sub(_value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC1155.sol\":3359:3389  _value.add(balances[_id][_to]) */\n      tag_92\n        /* \"contracts/ERC1155.sol\":3370:3378  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":3370:3383  balances[_id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":3379:3382  _id */\n      dup7\n        /* \"contracts/ERC1155.sol\":3370:3383  balances[_id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3370:3388  balances[_id][_to] */\n      0x00\n        /* \"contracts/ERC1155.sol\":3384:3387  _to */\n      dup8\n        /* \"contracts/ERC1155.sol\":3370:3388  balances[_id][_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC1155.sol\":3359:3365  _value */\n      dup5\n        /* \"contracts/ERC1155.sol\":3359:3369  _value.add */\n      tag_70\n      swap1\n        /* \"contracts/ERC1155.sol\":3359:3389  _value.add(balances[_id][_to]) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_92:\n        /* \"contracts/ERC1155.sol\":3336:3344  balances */\n      0x00\n        /* \"contracts/ERC1155.sol\":3336:3349  balances[_id] */\n      dup1\n        /* \"contracts/ERC1155.sol\":3345:3348  _id */\n      dup7\n        /* \"contracts/ERC1155.sol\":3336:3349  balances[_id] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3336:3354  balances[_id][_to] */\n      0x00\n        /* \"contracts/ERC1155.sol\":3350:3353  _to */\n      dup8\n        /* \"contracts/ERC1155.sol\":3336:3354  balances[_id][_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC1155.sol\":3336:3389  balances[_id][_to]   = _value.add(balances[_id][_to]) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC1155.sol\":3466:3469  _to */\n      dup5\n        /* \"contracts/ERC1155.sol\":3432:3483  TransferSingle(msg.sender, _from, _to, _id, _value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":3459:3464  _from */\n      dup7\n        /* \"contracts/ERC1155.sol\":3432:3483  TransferSingle(msg.sender, _from, _to, _id, _value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC1155.sol\":3447:3457  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":3432:3483  TransferSingle(msg.sender, _from, _to, _id, _value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62\n        /* \"contracts/ERC1155.sol\":3471:3474  _id */\n      dup8\n        /* \"contracts/ERC1155.sol\":3476:3482  _value */\n      dup8\n        /* \"contracts/ERC1155.sol\":3432:3483  TransferSingle(msg.sender, _from, _to, _id, _value) */\n      mload(0x40)\n      dup1\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"contracts/ERC1155.sol\":3636:3652  _to.isContract() */\n      tag_93\n        /* \"contracts/ERC1155.sol\":3636:3639  _to */\n      dup6\n        /* \"contracts/ERC1155.sol\":3636:3650  _to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_72\n        /* \"contracts/ERC1155.sol\":3636:3652  _to.isContract() */\n      jump\t// in\n    tag_93:\n        /* \"contracts/ERC1155.sol\":3632:3753  if (_to.isContract()) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/ERC1155.sol\":3668:3742  _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data) */\n      tag_95\n        /* \"contracts/ERC1155.sol\":3699:3709  msg.sender */\n      caller\n        /* \"contracts/ERC1155.sol\":3711:3716  _from */\n      dup8\n        /* \"contracts/ERC1155.sol\":3718:3721  _to */\n      dup8\n        /* \"contracts/ERC1155.sol\":3723:3726  _id */\n      dup8\n        /* \"contracts/ERC1155.sol\":3728:3734  _value */\n      dup8\n        /* \"contracts/ERC1155.sol\":3736:3741  _data */\n      dup8\n      dup8\n        /* \"contracts/ERC1155.sol\":3668:3742  _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data) */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":93:96   */\n      dup2\n        /* \"--CODEGEN--\":85:91   */\n      dup5\n        /* \"--CODEGEN--\":81:97   */\n      add\n        /* \"--CODEGEN--\":74:101   */\n      mstore\n        /* \"--CODEGEN--\":137:141   */\n      0x1f\n        /* \"--CODEGEN--\":133:142   */\n      not\n        /* \"--CODEGEN--\":126:130   */\n      0x1f\n        /* \"--CODEGEN--\":121:124   */\n      dup3\n        /* \"--CODEGEN--\":117:131   */\n      add\n        /* \"--CODEGEN--\":113:143   */\n      and\n        /* \"--CODEGEN--\":106:143   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":169:172   */\n      dup1\n        /* \"--CODEGEN--\":161:167   */\n      dup4\n        /* \"--CODEGEN--\":157:173   */\n      add\n        /* \"--CODEGEN--\":147:173   */\n      swap3\n      pop\n        /* \"contracts/ERC1155.sol\":3668:3742  _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data) */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":3668:3698  _doSafeTransferAcceptanceCheck */\n      tag_96\n        /* \"contracts/ERC1155.sol\":3668:3742  _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/ERC1155.sol\":3632:3753  if (_to.isContract()) {... */\n    tag_94:\n        /* \"contracts/ERC1155.sol\":2832:3759  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":1123:1243  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_68:\n        /* \"contracts/SafeMath.sol\":1181:1188  uint256 */\n      0x00\n        /* \"contracts/SafeMath.sol\":1212:1213  a */\n      dup3\n        /* \"contracts/SafeMath.sol\":1207:1208  b */\n      dup3\n        /* \"contracts/SafeMath.sol\":1207:1213  b <= a */\n      gt\n      iszero\n        /* \"contracts/SafeMath.sol\":1200:1214  assert(b <= a) */\n      tag_98\n      jumpi\n      invalid\n    tag_98:\n        /* \"contracts/SafeMath.sol\":1235:1236  b */\n      dup2\n        /* \"contracts/SafeMath.sol\":1231:1232  a */\n      dup4\n        /* \"contracts/SafeMath.sol\":1231:1236  a - b */\n      sub\n        /* \"contracts/SafeMath.sol\":1224:1236  return a - b */\n      swap1\n      pop\n        /* \"contracts/SafeMath.sol\":1123:1243  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SafeMath.sol\":1313:1450  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {... */\n    tag_70:\n        /* \"contracts/SafeMath.sol\":1371:1380  uint256 c */\n      0x00\n        /* \"contracts/SafeMath.sol\":1400:1401  b */\n      dup2\n        /* \"contracts/SafeMath.sol\":1396:1397  a */\n      dup4\n        /* \"contracts/SafeMath.sol\":1396:1401  a + b */\n      add\n        /* \"contracts/SafeMath.sol\":1392:1401  c = a + b */\n      swap1\n      pop\n        /* \"contracts/SafeMath.sol\":1423:1424  a */\n      dup3\n        /* \"contracts/SafeMath.sol\":1418:1419  c */\n      dup2\n        /* \"contracts/SafeMath.sol\":1418:1424  c >= a */\n      lt\n      iszero\n        /* \"contracts/SafeMath.sol\":1411:1425  assert(c >= a) */\n      tag_100\n      jumpi\n      invalid\n    tag_100:\n        /* \"contracts/SafeMath.sol\":1442:1443  c */\n      dup1\n        /* \"contracts/SafeMath.sol\":1435:1443  return c */\n      swap1\n      pop\n        /* \"contracts/SafeMath.sol\":1313:1450  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Address.sol\":465:1089  function isContract(address account) internal view returns (bool) {... */\n    tag_72:\n        /* \"contracts/Address.sol\":525:529  bool */\n      0x00\n        /* \"contracts/Address.sol\":541:553  uint256 size */\n      dup1\n        /* \"contracts/Address.sol\":1048:1055  account */\n      dup3\n        /* \"contracts/Address.sol\":1036:1056  extcodesize(account) */\n      extcodesize\n        /* \"contracts/Address.sol\":1028:1056  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"contracts/Address.sol\":1081:1082  0 */\n      0x00\n        /* \"contracts/Address.sol\":1074:1078  size */\n      dup2\n        /* \"contracts/Address.sol\":1074:1082  size > 0 */\n      gt\n        /* \"contracts/Address.sol\":1067:1082  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"contracts/Address.sol\":465:1089  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":10688:11869  function _doSafeBatchTransferAcceptanceCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) internal {... */\n    tag_75:\n        /* \"contracts/Common.sol\":311:321  0xbc197c81 */\n      0xbc197c81\n        /* \"contracts/ERC1155.sol\":11773:11795  ERC1155_BATCH_ACCEPTED */\n      0xe0\n      shl\n        /* \"contracts/ERC1155.sol\":11681:11795  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC1155.sol\":11702:11705  _to */\n      dup5\n        /* \"contracts/ERC1155.sol\":11681:11729  ERC1155TokenReceiver(_to).onERC1155BatchReceived */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xbc197c81\n        /* \"contracts/ERC1155.sol\":11730:11739  _operator */\n      dup9\n        /* \"contracts/ERC1155.sol\":11741:11746  _from */\n      dup9\n        /* \"contracts/ERC1155.sol\":11748:11752  _ids */\n      dup8\n        /* \"contracts/ERC1155.sol\":11754:11761  _values */\n      dup8\n        /* \"contracts/ERC1155.sol\":11763:11768  _data */\n      dup8\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup7\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup5\n      dup2\n      sub\n      dup5\n      mstore\n      dup8\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_103:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_105\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_103)\n    tag_105:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      dup5\n      dup2\n      sub\n      dup4\n      mstore\n      dup7\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      0x20\n      mul\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_106:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_108\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_106)\n    tag_108:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      dup5\n      dup2\n      sub\n      dup3\n      mstore\n      dup6\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_109:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_111\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_109)\n    tag_111:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_112\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_112:\n      pop\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_113\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_113:\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_114\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_114:\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_115\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_115:\n        /* \"contracts/ERC1155.sol\":11681:11769  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":11681:11795  ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC1155.sol\":11673:11862  require(ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED, \"contract returned an unknown value from onERC1155BatchReceived\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x3e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_907b1bc15e21fe4233c673581af2cf868cd5fa614b6015b432ff41fbc0222bad\n      0x3e\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_116:\n        /* \"contracts/ERC1155.sol\":10688:11869  function _doSafeBatchTransferAcceptanceCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) internal {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC1155.sol\":9554:10682  function _doSafeTransferAcceptanceCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) internal {... */\n    tag_96:\n        /* \"contracts/Common.sol\":164:174  0xf23a6e61 */\n      0xf23a6e61\n        /* \"contracts/ERC1155.sol\":10597:10613  ERC1155_ACCEPTED */\n      0xe0\n      shl\n        /* \"contracts/ERC1155.sol\":10512:10613  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"contracts/ERC1155.sol\":10533:10536  _to */\n      dup5\n        /* \"contracts/ERC1155.sol\":10512:10555  ERC1155TokenReceiver(_to).onERC1155Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xf23a6e61\n        /* \"contracts/ERC1155.sol\":10556:10565  _operator */\n      dup9\n        /* \"contracts/ERC1155.sol\":10567:10572  _from */\n      dup9\n        /* \"contracts/ERC1155.sol\":10574:10577  _id */\n      dup8\n        /* \"contracts/ERC1155.sol\":10579:10585  _value */\n      dup8\n        /* \"contracts/ERC1155.sol\":10587:10592  _data */\n      dup8\n        /* \"contracts/ERC1155.sol\":10512:10593  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) */\n      mload(0x40)\n      dup7\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup7\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_118:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_120\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_118)\n    tag_120:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/ERC1155.sol\":10512:10593  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_121\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_121:\n      pop\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_122\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_122:\n        /* \"contracts/ERC1155.sol\":10512:10593  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) */\n      pop\n      gas\n      call\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_123\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x00\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x00\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_123:\n        /* \"contracts/ERC1155.sol\":10512:10593  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_124\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_124:\n        /* \"contracts/ERC1155.sol\":10512:10593  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/ERC1155.sol\":10512:10613  ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"contracts/ERC1155.sol\":10504:10675  require(ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED, \"contract returned an unknown value from onERC1155Received\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x39\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_ef98af68c848abc187fba39b58082936b9de327b8b5fd25aacd07d63c4d89e42\n      0x39\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_125:\n        /* \"contracts/ERC1155.sol\":9554:10682  function _doSafeTransferAcceptanceCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) internal {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_62feaa226fe2bab79230d856b8132c73f9553fb9f97b507f32473583a3bdc412 64657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d7a65726f2e\n    data_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be 4e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e73666572732e\n    data_907b1bc15e21fe4233c673581af2cf868cd5fa614b6015b432ff41fbc0222bad 636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e4552433131353542617463685265636569766564\n    data_d06b0e7fc248df96a03d3f6210ab25cdbd58ba1e3989c7aed9df538ab45fc969 5f69647320616e64205f76616c756573206172726179206c656e677468206d757374206d617463682e\n    data_ef98af68c848abc187fba39b58082936b9de327b8b5fd25aacd07d63c4d89e42 636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564\n\n    auxdata: 0xa265627a7a7231582097df49fec362782cda5265cb7a3d68b1400d6ae34dd1a3b7bdfffc135dbb322264736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506118f2806100206000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c80634e1273f41161005b5780634e1273f4146102ab578063a22cb465146103ce578063e985e9c51461041e578063f242432a1461049a5761007c565b8062fdd58e1461008157806301ffc9a7146100e35780632eb2c2d614610148575b600080fd5b6100cd6004803603604081101561009757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610567565b6040518082815260200191505060405180910390f35b61012e600480360360208110156100f957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506105c1565b604051808215151515815260200191505060405180910390f35b6102a9600480360360a081101561015e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b90919293919293908035906020019064010000000081111561021057600080fd5b82018360208201111561022257600080fd5b8035906020019184602083028401116401000000008311171561024457600080fd5b90919293919293908035906020019064010000000081111561026557600080fd5b82018360208201111561027757600080fd5b8035906020019184600183028401116401000000008311171561029957600080fd5b9091929391929390505050610672565b005b610377600480360360408110156102c157600080fd5b81019080803590602001906401000000008111156102de57600080fd5b8201836020820111156102f057600080fd5b8035906020019184602083028401116401000000008311171561031257600080fd5b90919293919293908035906020019064010000000081111561033357600080fd5b82018360208201111561034557600080fd5b8035906020019184602083028401116401000000008311171561036757600080fd5b9091929391929390505050610c0e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103ba57808201518184015260208101905061039f565b505050509050019250505060405180910390f35b61041c600480360360408110156103e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610d24565b005b6104806004803603604081101561043457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e25565b604051808215151515815260200191505060405180910390f35b610565600480360360a08110156104b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561052157600080fd5b82018360208201111561053357600080fd5b8035906020019184600183028401116401000000008311171561055557600080fd5b9091929391929390505050610eb9565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065a575063d9b67a2660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15610668576001905061066d565b600090505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806117ca6025913960400191505060405180910390fd5b838390508686905014610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061185c6029913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148061081d575060011515600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806117ef602f913960400191505060405180910390fd5b60008090505b86869050811015610a2857600087878381811061089157fe5b90506020020135905060008686848181106108a857fe5b9050602002013590506109138160008085815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e590919063ffffffff16565b60008084815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109c860008084815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826112fc90919063ffffffff16565b60008084815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050806001019050610878565b508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040518080602001806020018381038352878782818152602001925060200280828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a4610b2a8773ffffffffffffffffffffffffffffffffffffffff16611316565b15610c0457610c03338989898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611329565b5b5050505050505050565b6060828290508585905014610c2257600080fd5b606085859050604051908082528060200260200182016040528015610c565781602001602082028038833980820191505090505b50905060008090505b86869050811015610d1757600080868684818110610c7957fe5b9050602002013581526020019081526020016000206000888884818110610c9c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610d0057fe5b602002602001018181525050806001019050610c5f565b5080915050949350505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610f5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5f746f206d757374206265206e6f6e2d7a65726f2e000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611023575060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b611078576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806117ef602f913960400191505060405180910390fd5b6110da8360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e590919063ffffffff16565b60008086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061118f60008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846112fc90919063ffffffff16565b60008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051808381526020018281526020019250505060405180910390a46112858573ffffffffffffffffffffffffffffffffffffffff16611316565b156112dd576112dc338787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506115ba565b5b505050505050565b6000828211156112f157fe5b818303905092915050565b600081830190508281101561130d57fe5b80905092915050565b600080823b905060008111915050919050565b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663bc197c8188888787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561142f578082015181840152602081019050611414565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611471578082015181840152602081019050611456565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156114b0578082015181840152602081019050611495565b50505050905090810190601f1680156114dd5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561150257600080fd5b505af1158015611516573d6000803e3d6000fd5b505050506040513d602081101561152c57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146115b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018061181e603e913960400191505060405180910390fd5b505050505050565b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663f23a6e6188888787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116c15780820151818401526020810190506116a6565b50505050905090810190601f1680156116ee5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561171157600080fd5b505af1158015611725573d6000803e3d6000fd5b505050506040513d602081101561173b57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806118856039913960400191505060405180910390fd5b50505050505056fe64657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d7a65726f2e4e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e73666572732e636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e45524331313535426174636852656365697665645f69647320616e64205f76616c756573206172726179206c656e677468206d757374206d617463682e636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564a265627a7a7231582097df49fec362782cda5265cb7a3d68b1400d6ae34dd1a3b7bdfffc135dbb322264736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F2 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x49A JUMPI PUSH2 0x7C JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE3 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x567 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x672 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x377 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xC0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x39F JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD24 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x480 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x565 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xEB9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x65A JUMPI POP PUSH4 0xD9B67A26 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST ISZERO PUSH2 0x668 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x66D JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x17CA PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 SWAP1 POP DUP7 DUP7 SWAP1 POP EQ PUSH2 0x756 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x185C PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x81D JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ JUMPDEST PUSH2 0x872 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x17EF PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP7 DUP7 SWAP1 POP DUP2 LT ISZERO PUSH2 0xA28 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x891 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x8A8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH2 0x913 DUP2 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x12E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x9C8 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0x12FC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x878 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP6 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xB2A DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1316 JUMP JUMPDEST ISZERO PUSH2 0xC04 JUMPI PUSH2 0xC03 CALLER DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x1329 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 SWAP1 POP DUP6 DUP6 SWAP1 POP EQ PUSH2 0xC22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP6 DUP6 SWAP1 POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC56 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP7 DUP7 SWAP1 POP DUP2 LT ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 DUP1 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0xC79 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0xC9C JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xC5F JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF5C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5F746F206D757374206265206E6F6E2D7A65726F2E0000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1023 JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ JUMPDEST PUSH2 0x1078 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x17EF PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10DA DUP4 PUSH1 0x0 DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x12E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x118F PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP5 PUSH2 0x12FC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP8 DUP8 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1285 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1316 JUMP JUMPDEST ISZERO PUSH2 0x12DD JUMPI PUSH2 0x12DC CALLER DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x12F1 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x130D JUMPI INVALID JUMPDEST DUP1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP8 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x142F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1414 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1471 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1456 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14B0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1495 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14DD JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1516 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x15B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x181E PUSH1 0x3E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16A6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16EE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1725 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x173B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x17C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1885 PUSH1 0x39 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP INVALID PUSH5 0x657374696E PUSH2 0x7469 PUSH16 0x6E2061646472657373206D7573742062 PUSH6 0x206E6F6E2D7A PUSH6 0x726F2E4E6565 PUSH5 0x206F706572 PUSH2 0x746F PUSH19 0x20617070726F76616C20666F72203372642070 PUSH2 0x7274 PUSH26 0x207472616E73666572732E636F6E74726163742072657475726E PUSH6 0x6420616E2075 PUSH15 0x6B6E6F776E2076616C75652066726F PUSH14 0x206F6E4552433131353542617463 PUSH9 0x52656365697665645F PUSH10 0x647320616E64205F7661 PUSH13 0x756573206172726179206C656E PUSH8 0x7468206D75737420 PUSH14 0x617463682E636F6E747261637420 PUSH19 0x657475726E656420616E20756E6B6E6F776E20 PUSH23 0x616C75652066726F6D206F6E4552433131353552656365 PUSH10 0x766564A265627A7A7231 PC KECCAK256 SWAP8 0xDF 0x49 INVALID 0xC3 PUSH3 0x782CDA MSTORE PUSH6 0xCB7A3D68B140 0xD PUSH11 0xE34DD1A3B7BDFFFC135DBB ORIGIN 0x22 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "214:11657:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;214:11657:2;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061007c5760003560e01c80634e1273f41161005b5780634e1273f4146102ab578063a22cb465146103ce578063e985e9c51461041e578063f242432a1461049a5761007c565b8062fdd58e1461008157806301ffc9a7146100e35780632eb2c2d614610148575b600080fd5b6100cd6004803603604081101561009757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610567565b6040518082815260200191505060405180910390f35b61012e600480360360208110156100f957600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506105c1565b604051808215151515815260200191505060405180910390f35b6102a9600480360360a081101561015e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156101bb57600080fd5b8201836020820111156101cd57600080fd5b803590602001918460208302840111640100000000831117156101ef57600080fd5b90919293919293908035906020019064010000000081111561021057600080fd5b82018360208201111561022257600080fd5b8035906020019184602083028401116401000000008311171561024457600080fd5b90919293919293908035906020019064010000000081111561026557600080fd5b82018360208201111561027757600080fd5b8035906020019184600183028401116401000000008311171561029957600080fd5b9091929391929390505050610672565b005b610377600480360360408110156102c157600080fd5b81019080803590602001906401000000008111156102de57600080fd5b8201836020820111156102f057600080fd5b8035906020019184602083028401116401000000008311171561031257600080fd5b90919293919293908035906020019064010000000081111561033357600080fd5b82018360208201111561034557600080fd5b8035906020019184602083028401116401000000008311171561036757600080fd5b9091929391929390505050610c0e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103ba57808201518184015260208101905061039f565b505050509050019250505060405180910390f35b61041c600480360360408110156103e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610d24565b005b6104806004803603604081101561043457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e25565b604051808215151515815260200191505060405180910390f35b610565600480360360a08110156104b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561052157600080fd5b82018360208201111561053357600080fd5b8035906020019184600183028401116401000000008311171561055557600080fd5b9091929391929390505050610eb9565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065a575063d9b67a2660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15610668576001905061066d565b600090505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806117ca6025913960400191505060405180910390fd5b838390508686905014610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061185c6029913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16148061081d575060011515600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806117ef602f913960400191505060405180910390fd5b60008090505b86869050811015610a2857600087878381811061089157fe5b90506020020135905060008686848181106108a857fe5b9050602002013590506109138160008085815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e590919063ffffffff16565b60008084815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109c860008084815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826112fc90919063ffffffff16565b60008084815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050806001019050610878565b508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040518080602001806020018381038352878782818152602001925060200280828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925060200280828437600081840152601f19601f820116905080830192505050965050505050505060405180910390a4610b2a8773ffffffffffffffffffffffffffffffffffffffff16611316565b15610c0457610c03338989898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611329565b5b5050505050505050565b6060828290508585905014610c2257600080fd5b606085859050604051908082528060200260200182016040528015610c565781602001602082028038833980820191505090505b50905060008090505b86869050811015610d1757600080868684818110610c7957fe5b9050602002013581526020019081526020016000206000888884818110610c9c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610d0057fe5b602002602001018181525050806001019050610c5f565b5080915050949350505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610f5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5f746f206d757374206265206e6f6e2d7a65726f2e000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611023575060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b611078576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806117ef602f913960400191505060405180910390fd5b6110da8360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112e590919063ffffffff16565b60008086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061118f60008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846112fc90919063ffffffff16565b60008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051808381526020018281526020019250505060405180910390a46112858573ffffffffffffffffffffffffffffffffffffffff16611316565b156112dd576112dc338787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506115ba565b5b505050505050565b6000828211156112f157fe5b818303905092915050565b600081830190508281101561130d57fe5b80905092915050565b600080823b905060008111915050919050565b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663bc197c8188888787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561142f578082015181840152602081019050611414565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611471578082015181840152602081019050611456565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156114b0578082015181840152602081019050611495565b50505050905090810190601f1680156114dd5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561150257600080fd5b505af1158015611516573d6000803e3d6000fd5b505050506040513d602081101561152c57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146115b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018061181e603e913960400191505060405180910390fd5b505050505050565b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663f23a6e6188888787876040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116c15780820151818401526020810190506116a6565b50505050905090810190601f1680156116ee5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561171157600080fd5b505af1158015611725573d6000803e3d6000fd5b505050506040513d602081101561173b57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806118856039913960400191505060405180910390fd5b50505050505056fe64657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d7a65726f2e4e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e73666572732e636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e45524331313535426174636852656365697665645f69647320616e64205f76616c756573206172726179206c656e677468206d757374206d617463682e636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564a265627a7a7231582097df49fec362782cda5265cb7a3d68b1400d6ae34dd1a3b7bdfffc135dbb322264736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4E1273F4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x49A JUMPI PUSH2 0x7C JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE3 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x567 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0x672 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x377 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x312 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xC0E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x39F JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD24 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x480 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x565 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x4B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x521 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xEB9 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x65A JUMPI POP PUSH4 0xD9B67A26 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST ISZERO PUSH2 0x668 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x66D JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x17CA PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 SWAP1 POP DUP7 DUP7 SWAP1 POP EQ PUSH2 0x756 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x185C PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x81D JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ JUMPDEST PUSH2 0x872 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x17EF PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP7 DUP7 SWAP1 POP DUP2 LT ISZERO PUSH2 0xA28 JUMPI PUSH1 0x0 DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x891 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0x8A8 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH2 0x913 DUP2 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x12E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x9C8 PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0x12FC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x878 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP8 DUP8 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP6 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xB2A DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1316 JUMP JUMPDEST ISZERO PUSH2 0xC04 JUMPI PUSH2 0xC03 CALLER DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x1329 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 SWAP1 POP DUP6 DUP6 SWAP1 POP EQ PUSH2 0xC22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP6 DUP6 SWAP1 POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC56 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP7 DUP7 SWAP1 POP DUP2 LT ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 DUP1 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0xC79 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0xC9C JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD00 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xC5F JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF5C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5F746F206D757374206265206E6F6E2D7A65726F2E0000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1023 JUMPI POP PUSH1 0x1 ISZERO ISZERO PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ JUMPDEST PUSH2 0x1078 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x17EF PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x10DA DUP4 PUSH1 0x0 DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x12E5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x118F PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP5 PUSH2 0x12FC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP8 DUP8 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1285 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1316 JUMP JUMPDEST ISZERO PUSH2 0x12DD JUMPI PUSH2 0x12DC CALLER DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x12F1 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x130D JUMPI INVALID JUMPDEST DUP1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 SUB DUP5 MSTORE DUP8 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x142F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1414 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1471 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1456 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14B0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1495 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14DD JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1516 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x15B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x3E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x181E PUSH1 0x3E SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP9 DUP9 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16A6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x16EE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1711 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1725 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x173B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x17C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x39 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1885 PUSH1 0x39 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP INVALID PUSH5 0x657374696E PUSH2 0x7469 PUSH16 0x6E2061646472657373206D7573742062 PUSH6 0x206E6F6E2D7A PUSH6 0x726F2E4E6565 PUSH5 0x206F706572 PUSH2 0x746F PUSH19 0x20617070726F76616C20666F72203372642070 PUSH2 0x7274 PUSH26 0x207472616E73666572732E636F6E74726163742072657475726E PUSH6 0x6420616E2075 PUSH15 0x6B6E6F776E2076616C75652066726F PUSH14 0x206F6E4552433131353542617463 PUSH9 0x52656365697665645F PUSH10 0x647320616E64205F7661 PUSH13 0x756573206172726179206C656E PUSH8 0x7468206D75737420 PUSH14 0x617463682E636F6E747261637420 PUSH19 0x657475726E656420616E20756E6B6E6F776E20 PUSH23 0x616C75652066726F6D206F6E4552433131353552656365 PUSH10 0x766564A265627A7A7231 PC KECCAK256 SWAP8 0xDF 0x49 INVALID 0xC3 PUSH3 0x782CDA MSTORE PUSH6 0xCB7A3D68B140 0xD PUSH11 0xE34DD1A3B7BDFFFC135DBB ORIGIN 0x22 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "214:11657:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;214:11657:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7401:369;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7401:369:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1319:273;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1319:273:2;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5389:1768;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;5389:1768:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;5389:1768:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5389:1768:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;5389:1768:2;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;5389:1768:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5389:1768:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;5389:1768:2;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;5389:1768:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5389:1768:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;5389:1768:2;;;;;;;;;;;;:::i;:::-;;8069:394;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8069:394:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8069:394:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8069:394:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8069:394:2;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8069:394:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8069:394:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8069:394:2;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8069:394:2;;;;;;;;;;;;;;;;;8817:202;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8817:202:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9298:149;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9298:149:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2832:927;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2832:927:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2832:927:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2832:927:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2832:927:2;;;;;;;;;;;;:::i;:::-;;7401:369;7472:7;7742:8;:13;7751:3;7742:13;;;;;;;;;;;:21;7756:6;7742:21;;;;;;;;;;;;;;;;7735:28;;7401:369;;;;:::o;1319:273::-;1400:4;782:10;1437:26;;1421:42;;;:12;:42;;;;:102;;;;1302:10;1496:27;;1480:43;;;:12;:43;;;;1421:102;1417:145;;;1546:4;1539:11;;;;1417:145;1580:5;1573:12;;1319:273;;;;:::o;5389:1768::-;5598:3;5583:19;;:3;:19;;;;5575:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5677:7;;:14;;5662:4;;:11;;:29;5654:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5764:10;5755:19;;:5;:19;;;:66;;;;5817:4;5778:43;;:16;:23;5795:5;5778:23;;;;;;;;;;;;;;;:35;5802:10;5778:35;;;;;;;;;;;;;;;;;;;;;;;;;:43;;;5755:66;5747:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5889:9;5901:1;5889:13;;5884:380;5908:4;;:11;;5904:1;:15;5884:380;;;5940:10;5953:4;;5958:1;5953:7;;;;;;;;;;;;;5940:20;;5974:13;5990:7;;5998:1;5990:10;;;;;;;;;;;;;5974:26;;6159:30;6183:5;6159:8;:12;6168:2;6159:12;;;;;;;;;;;:19;6172:5;6159:19;;;;;;;;;;;;;;;;:23;;:30;;;;:::i;:::-;6137:8;:12;6146:2;6137:12;;;;;;;;;;;:19;6150:5;6137:19;;;;;;;;;;;;;;;:52;;;;6225:28;6235:8;:12;6244:2;6235:12;;;;;;;;;;;:17;6248:3;6235:17;;;;;;;;;;;;;;;;6225:5;:9;;:28;;;;:::i;:::-;6203:8;:12;6212:2;6203:12;;;;;;;;;;;:17;6216:3;6203:17;;;;;;;;;;;;;;;:50;;;;5884:380;;5921:3;;;;;5884:380;;;;6847:3;6814:52;;6840:5;6814:52;;6828:10;6814:52;;;6852:4;;6858:7;;6814:52;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6814:52:2;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6814:52:2;;;;;;;;;;;;;;;;;7027:16;:3;:14;;;:16::i;:::-;7023:128;;;7059:81;7095:10;7107:5;7114:3;7119:4;;7059:81;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7059:81:2;;;;;;7125:7;;7059:81;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7059:81:2;;;;;;7134:5;;7059:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7059:81:2;;;;;;:35;:81::i;:::-;7023:128;5389:1768;;;;;;;;:::o;8069:394::-;8169:16;8224:4;;:11;;8206:7;;:14;;:29;8198:38;;;;;;8247:26;8290:7;;:14;;8276:29;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;8276:29:2;;;;8247:58;;8321:9;8333:1;8321:13;;8316:114;8340:7;;:14;;8336:1;:18;8316:114;;;8390:8;:17;8399:4;;8404:1;8399:7;;;;;;;;;;;;;8390:17;;;;;;;;;;;:29;8408:7;;8416:1;8408:10;;;;;;;;;;;;;;;8390:29;;;;;;;;;;;;;;;;8375:9;8385:1;8375:12;;;;;;;;;;;;;:44;;;;;8356:3;;;;;8316:114;;;;8447:9;8440:16;;;8069:394;;;;;;:::o;8817:202::-;8940:9;8898:16;:28;8915:10;8898:28;;;;;;;;;;;;;;;:39;8927:9;8898:39;;;;;;;;;;;;;;;;:51;;;;;;;;;;;;;;;;;;8991:9;8964:48;;8979:10;8964:48;;;9002:9;8964:48;;;;;;;;;;;;;;;;;;;;;;8817:202;;:::o;9298:149::-;9382:4;9405:16;:24;9422:6;9405:24;;;;;;;;;;;;;;;:35;9430:9;9405:35;;;;;;;;;;;;;;;;;;;;;;;;;9398:42;;9298:149;;;;:::o;2832:927::-;2980:3;2965:19;;:3;:19;;;;2957:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3037:10;3028:19;;:5;:19;;;:66;;;;3090:4;3051:43;;:16;:23;3068:5;3051:23;;;;;;;;;;;;;;;:35;3075:10;3051:35;;;;;;;;;;;;;;;;;;;;;;;;;:43;;;3028:66;3020:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3294:32;3319:6;3294:8;:13;3303:3;3294:13;;;;;;;;;;;:20;3308:5;3294:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;3271:8;:13;3280:3;3271:13;;;;;;;;;;;:20;3285:5;3271:20;;;;;;;;;;;;;;;:55;;;;3359:30;3370:8;:13;3379:3;3370:13;;;;;;;;;;;:18;3384:3;3370:18;;;;;;;;;;;;;;;;3359:6;:10;;:30;;;;:::i;:::-;3336:8;:13;3345:3;3336:13;;;;;;;;;;;:18;3350:3;3336:18;;;;;;;;;;;;;;;:53;;;;3466:3;3432:51;;3459:5;3432:51;;3447:10;3432:51;;;3471:3;3476:6;3432:51;;;;;;;;;;;;;;;;;;;;;;;;3636:16;:3;:14;;;:16::i;:::-;3632:121;;;3668:74;3699:10;3711:5;3718:3;3723;3728:6;3736:5;;3668:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3668:74:2;;;;;;:30;:74::i;:::-;3632:121;2832:927;;;;;;:::o;1123:120:6:-;1181:7;1212:1;1207;:6;;1200:14;;;;1235:1;1231;:5;1224:12;;1123:120;;;;:::o;1313:137::-;1371:9;1400:1;1396;:5;1392:9;;1423:1;1418;:6;;1411:14;;;;1442:1;1435:8;;1313:137;;;;:::o;465:624:0:-;525:4;541:12;1048:7;1036:20;1028:28;;1081:1;1074:4;:8;1067:15;;;465:624;;;:::o;10688:1181:2:-;311:10:1;11773:22:2;;11681:114;;;11702:3;11681:48;;;11730:9;11741:5;11748:4;11754:7;11763:5;11681:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11681:88:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11681:88:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11681:88:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11681:88:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11681:88:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11681:88:2;;;;;;;;;;;;;;;;:114;;;;11673:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10688:1181;;;;;;:::o;9554:1128::-;164:10:1;10597:16:2;;10512:101;;;10533:3;10512:43;;;10556:9;10567:5;10574:3;10579:6;10587:5;10512:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10512:81:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10512:81:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10512:81:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10512:81:2;;;;;;;;;;;;;;;;:101;;;;10504:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9554:1128;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1277200",
								"executionCost": "1329",
								"totalCost": "1278529"
							},
							"external": {
								"balanceOf(address,uint256)": "1304",
								"balanceOfBatch(address[],uint256[])": "infinite",
								"isApprovedForAll(address,address)": "1413",
								"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "infinite",
								"safeTransferFrom(address,address,uint256,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "23183",
								"supportsInterface(bytes4)": "457"
							},
							"internal": {
								"_doSafeBatchTransferAcceptanceCheck(address,address,address,uint256[] memory,uint256[] memory,bytes memory)": "infinite",
								"_doSafeTransferAcceptanceCheck(address,address,address,uint256,uint256,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 214,
									"end": 11871,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "MSTORE"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "POP"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "DUP1"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "CODECOPY"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 214,
									"end": 11871,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a7231582097df49fec362782cda5265cb7a3d68b1400d6ae34dd1a3b7bdfffc135dbb322264736f6c63430005110032",
									".code": [
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "MSTORE"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "POP"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "LT"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "SHR"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "4E1273F4"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "GT"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "4E1273F4"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "A22CB465"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "E985E9C5"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "F242432A"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMP"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPDEST"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "FDD58E"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "1FFC9A7"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "2EB2C2D6"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "EQ"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPI"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "JUMPDEST"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "DUP1"
										},
										{
											"begin": 214,
											"end": 11871,
											"name": "REVERT"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "JUMPDEST"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "ADD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "AND"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "ADD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP3"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "ADD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP3"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "JUMPDEST"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "MLOAD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP3"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "MSTORE"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "ADD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "MLOAD"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "DUP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SUB"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP1"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "RETURN"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "JUMPDEST"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP2"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ADD"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "NOT"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "AND"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ADD"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP3"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP2"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "JUMPDEST"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "MLOAD"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP3"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ISZERO"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ISZERO"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ISZERO"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ISZERO"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP2"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "MSTORE"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "ADD"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP2"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "MLOAD"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "DUP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP2"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SUB"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "RETURN"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 16,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 17,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "AND"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "AND"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 101,
											"end": 110,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 97,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 98,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 99,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 111,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 119,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 129,
											"end": 130,
											"name": "DUP1"
										},
										{
											"begin": 122,
											"end": 134,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 101,
											"end": 110,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 97,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 98,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 99,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 111,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 119,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 129,
											"end": 130,
											"name": "DUP1"
										},
										{
											"begin": 122,
											"end": 134,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "DUP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "ADD"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 100,
											"end": 109,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 96,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 97,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 98,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 110,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 118,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 131,
											"end": 132,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 128,
											"end": 129,
											"name": "DUP1"
										},
										{
											"begin": 121,
											"end": 133,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP2"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP3"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP4"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "SWAP1"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "STOP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 101,
											"end": 110,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 97,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 98,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 99,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 111,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 119,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 129,
											"end": 130,
											"name": "DUP1"
										},
										{
											"begin": 122,
											"end": 134,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 101,
											"end": 110,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 97,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 98,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 99,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 111,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 119,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 129,
											"end": 130,
											"name": "DUP1"
										},
										{
											"begin": 122,
											"end": 134,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "JUMPDEST"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MLOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SUB"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MSTORE"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MLOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MSTORE"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MLOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MUL"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "ADD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP3"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "MLOAD"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "DUP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP2"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SUB"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP1"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "RETURN"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "JUMPDEST"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "PUSH [tag]",
											"value": "41"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "DUP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "DUP2"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "ADD"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "DUP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "DUP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "AND"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "ADD"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP3"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP2"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "DUP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "ISZERO"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "ISZERO"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "ADD"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP3"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP2"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "SWAP1"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "POP"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "POP"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "POP"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "PUSH [tag]",
											"value": "43"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "tag",
											"value": "41"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "JUMPDEST"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "STOP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "JUMPDEST"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ADD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "AND"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ADD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP3"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "AND"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ADD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP3"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "tag",
											"value": "44"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "JUMPDEST"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "MLOAD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP3"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ISZERO"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ISZERO"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ISZERO"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ISZERO"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "MSTORE"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "ADD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "MLOAD"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "DUP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SUB"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP1"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "RETURN"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "47"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 16,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 17,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "48"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "48"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "AND"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "49"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "50"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "50"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "DUP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "ADD"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 100,
											"end": 109,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 96,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 97,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 98,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 110,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 118,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 131,
											"end": 132,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 128,
											"end": 129,
											"name": "DUP1"
										},
										{
											"begin": 121,
											"end": 133,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP4"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP2"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP3"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP4"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "SWAP1"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "PUSH [tag]",
											"value": "52"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "tag",
											"value": "47"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "STOP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "JUMPDEST"
										},
										{
											"begin": 7472,
											"end": 7479,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7742,
											"end": 7750,
											"name": "DUP1"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7751,
											"end": 7754,
											"name": "DUP4"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "DUP2"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "MSTORE"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "ADD"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "SWAP1"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "DUP2"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "MSTORE"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "ADD"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "KECCAK256"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7756,
											"end": 7762,
											"name": "DUP5"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "AND"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "AND"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "DUP2"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "MSTORE"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "ADD"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "SWAP1"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "DUP2"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "MSTORE"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "ADD"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "KECCAK256"
										},
										{
											"begin": 7742,
											"end": 7763,
											"name": "SLOAD"
										},
										{
											"begin": 7735,
											"end": 7763,
											"name": "SWAP1"
										},
										{
											"begin": 7735,
											"end": 7763,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP3"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "SWAP2"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "POP"
										},
										{
											"begin": 7401,
											"end": 7770,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "JUMPDEST"
										},
										{
											"begin": 1400,
											"end": 1404,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 782,
											"end": 792,
											"name": "PUSH",
											"value": "1FFC9A7"
										},
										{
											"begin": 1437,
											"end": 1463,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 1437,
											"end": 1463,
											"name": "SHL"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "NOT"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "AND"
										},
										{
											"begin": 1421,
											"end": 1433,
											"name": "DUP3"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "NOT"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "AND"
										},
										{
											"begin": 1421,
											"end": 1463,
											"name": "EQ"
										},
										{
											"begin": 1421,
											"end": 1523,
											"name": "DUP1"
										},
										{
											"begin": 1421,
											"end": 1523,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 1421,
											"end": 1523,
											"name": "JUMPI"
										},
										{
											"begin": 1421,
											"end": 1523,
											"name": "POP"
										},
										{
											"begin": 1302,
											"end": 1312,
											"name": "PUSH",
											"value": "D9B67A26"
										},
										{
											"begin": 1496,
											"end": 1523,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 1496,
											"end": 1523,
											"name": "SHL"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "NOT"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "AND"
										},
										{
											"begin": 1480,
											"end": 1492,
											"name": "DUP3"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "NOT"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "AND"
										},
										{
											"begin": 1480,
											"end": 1523,
											"name": "EQ"
										},
										{
											"begin": 1421,
											"end": 1523,
											"name": "tag",
											"value": "55"
										},
										{
											"begin": 1421,
											"end": 1523,
											"name": "JUMPDEST"
										},
										{
											"begin": 1417,
											"end": 1562,
											"name": "ISZERO"
										},
										{
											"begin": 1417,
											"end": 1562,
											"name": "PUSH [tag]",
											"value": "56"
										},
										{
											"begin": 1417,
											"end": 1562,
											"name": "JUMPI"
										},
										{
											"begin": 1546,
											"end": 1550,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1539,
											"end": 1550,
											"name": "SWAP1"
										},
										{
											"begin": 1539,
											"end": 1550,
											"name": "POP"
										},
										{
											"begin": 1539,
											"end": 1550,
											"name": "PUSH [tag]",
											"value": "54"
										},
										{
											"begin": 1539,
											"end": 1550,
											"name": "JUMP"
										},
										{
											"begin": 1417,
											"end": 1562,
											"name": "tag",
											"value": "56"
										},
										{
											"begin": 1417,
											"end": 1562,
											"name": "JUMPDEST"
										},
										{
											"begin": 1580,
											"end": 1585,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1585,
											"name": "SWAP1"
										},
										{
											"begin": 1573,
											"end": 1585,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "tag",
											"value": "54"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "JUMPDEST"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP2"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "SWAP1"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "POP"
										},
										{
											"begin": 1319,
											"end": 1592,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "JUMPDEST"
										},
										{
											"begin": 5598,
											"end": 5601,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5583,
											"end": 5602,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5583,
											"end": 5602,
											"name": "AND"
										},
										{
											"begin": 5583,
											"end": 5586,
											"name": "DUP8"
										},
										{
											"begin": 5583,
											"end": 5602,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5583,
											"end": 5602,
											"name": "AND"
										},
										{
											"begin": 5583,
											"end": 5602,
											"name": "EQ"
										},
										{
											"begin": 5583,
											"end": 5602,
											"name": "ISZERO"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "JUMPI"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "MLOAD"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP2"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "MSTORE"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "ADD"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP1"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP1"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "ADD"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP3"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP2"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "SUB"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP3"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "MSTORE"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "25"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP2"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "MSTORE"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "ADD"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP1"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH data",
											"value": "62FEAA226FE2BAB79230D856B8132C73F9553FB9F97B507F32473583A3BDC412"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "25"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "SWAP2"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "CODECOPY"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "ADD"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "SWAP2"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "POP"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "POP"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "MLOAD"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "DUP1"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "SWAP2"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "SUB"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "SWAP1"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "REVERT"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "tag",
											"value": "58"
										},
										{
											"begin": 5575,
											"end": 5644,
											"name": "JUMPDEST"
										},
										{
											"begin": 5677,
											"end": 5684,
											"name": "DUP4"
										},
										{
											"begin": 5677,
											"end": 5684,
											"name": "DUP4"
										},
										{
											"begin": 5677,
											"end": 5691,
											"name": "SWAP1"
										},
										{
											"begin": 5677,
											"end": 5691,
											"name": "POP"
										},
										{
											"begin": 5662,
											"end": 5666,
											"name": "DUP7"
										},
										{
											"begin": 5662,
											"end": 5666,
											"name": "DUP7"
										},
										{
											"begin": 5662,
											"end": 5673,
											"name": "SWAP1"
										},
										{
											"begin": 5662,
											"end": 5673,
											"name": "POP"
										},
										{
											"begin": 5662,
											"end": 5691,
											"name": "EQ"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH [tag]",
											"value": "59"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "JUMPI"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "MLOAD"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP2"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "MSTORE"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "ADD"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP1"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP1"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "ADD"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP3"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP2"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "SUB"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP3"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "MSTORE"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP2"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "MSTORE"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "ADD"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP1"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH data",
											"value": "D06B0E7FC248DF96A03D3F6210AB25CDBD58BA1E3989C7AED9DF538AB45FC969"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "SWAP2"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "CODECOPY"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "ADD"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "SWAP2"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "POP"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "POP"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "MLOAD"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "DUP1"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "SWAP2"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "SUB"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "SWAP1"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "REVERT"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "tag",
											"value": "59"
										},
										{
											"begin": 5654,
											"end": 5737,
											"name": "JUMPDEST"
										},
										{
											"begin": 5764,
											"end": 5774,
											"name": "CALLER"
										},
										{
											"begin": 5755,
											"end": 5774,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5755,
											"end": 5774,
											"name": "AND"
										},
										{
											"begin": 5755,
											"end": 5760,
											"name": "DUP9"
										},
										{
											"begin": 5755,
											"end": 5774,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5755,
											"end": 5774,
											"name": "AND"
										},
										{
											"begin": 5755,
											"end": 5774,
											"name": "EQ"
										},
										{
											"begin": 5755,
											"end": 5821,
											"name": "DUP1"
										},
										{
											"begin": 5755,
											"end": 5821,
											"name": "PUSH [tag]",
											"value": "60"
										},
										{
											"begin": 5755,
											"end": 5821,
											"name": "JUMPI"
										},
										{
											"begin": 5755,
											"end": 5821,
											"name": "POP"
										},
										{
											"begin": 5817,
											"end": 5821,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 5778,
											"end": 5821,
											"name": "ISZERO"
										},
										{
											"begin": 5778,
											"end": 5821,
											"name": "ISZERO"
										},
										{
											"begin": 5778,
											"end": 5794,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5795,
											"end": 5800,
											"name": "DUP11"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "AND"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "AND"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "DUP2"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "MSTORE"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "ADD"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "SWAP1"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "DUP2"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "MSTORE"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "ADD"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5778,
											"end": 5801,
											"name": "KECCAK256"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5802,
											"end": 5812,
											"name": "CALLER"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "AND"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "AND"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "DUP2"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "MSTORE"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "ADD"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "SWAP1"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "DUP2"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "MSTORE"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "ADD"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "KECCAK256"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "SWAP1"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "SLOAD"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "SWAP1"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "EXP"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "SWAP1"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "DIV"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 5778,
											"end": 5813,
											"name": "AND"
										},
										{
											"begin": 5778,
											"end": 5821,
											"name": "ISZERO"
										},
										{
											"begin": 5778,
											"end": 5821,
											"name": "ISZERO"
										},
										{
											"begin": 5778,
											"end": 5821,
											"name": "EQ"
										},
										{
											"begin": 5755,
											"end": 5821,
											"name": "tag",
											"value": "60"
										},
										{
											"begin": 5755,
											"end": 5821,
											"name": "JUMPDEST"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "JUMPI"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "MLOAD"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP2"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "MSTORE"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "ADD"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP1"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP1"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "ADD"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP3"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP2"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "SUB"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP3"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "MSTORE"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "2F"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP2"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "MSTORE"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "ADD"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP1"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH data",
											"value": "849B4236B9CC0954DC0E729AB0ED3552779085D502D2B1DAD4E899FD8211D4BE"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "2F"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "SWAP2"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "CODECOPY"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "ADD"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "SWAP2"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "POP"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "POP"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "MLOAD"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "DUP1"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "SWAP2"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "SUB"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "SWAP1"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "REVERT"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 5747,
											"end": 5873,
											"name": "JUMPDEST"
										},
										{
											"begin": 5889,
											"end": 5898,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5901,
											"end": 5902,
											"name": "DUP1"
										},
										{
											"begin": 5889,
											"end": 5902,
											"name": "SWAP1"
										},
										{
											"begin": 5889,
											"end": 5902,
											"name": "POP"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "tag",
											"value": "62"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "JUMPDEST"
										},
										{
											"begin": 5908,
											"end": 5912,
											"name": "DUP7"
										},
										{
											"begin": 5908,
											"end": 5912,
											"name": "DUP7"
										},
										{
											"begin": 5908,
											"end": 5919,
											"name": "SWAP1"
										},
										{
											"begin": 5908,
											"end": 5919,
											"name": "POP"
										},
										{
											"begin": 5904,
											"end": 5905,
											"name": "DUP2"
										},
										{
											"begin": 5904,
											"end": 5919,
											"name": "LT"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "ISZERO"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "PUSH [tag]",
											"value": "63"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "JUMPI"
										},
										{
											"begin": 5940,
											"end": 5950,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5953,
											"end": 5957,
											"name": "DUP8"
										},
										{
											"begin": 5953,
											"end": 5957,
											"name": "DUP8"
										},
										{
											"begin": 5958,
											"end": 5959,
											"name": "DUP4"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "DUP2"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "DUP2"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "LT"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "PUSH [tag]",
											"value": "65"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "JUMPI"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "INVALID"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "tag",
											"value": "65"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "JUMPDEST"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "SWAP1"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "POP"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "MUL"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "ADD"
										},
										{
											"begin": 5953,
											"end": 5960,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5940,
											"end": 5960,
											"name": "SWAP1"
										},
										{
											"begin": 5940,
											"end": 5960,
											"name": "POP"
										},
										{
											"begin": 5974,
											"end": 5987,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5990,
											"end": 5997,
											"name": "DUP7"
										},
										{
											"begin": 5990,
											"end": 5997,
											"name": "DUP7"
										},
										{
											"begin": 5998,
											"end": 5999,
											"name": "DUP5"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "DUP2"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "DUP2"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "LT"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "PUSH [tag]",
											"value": "66"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "JUMPI"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "INVALID"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "tag",
											"value": "66"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "JUMPDEST"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "SWAP1"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "POP"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "MUL"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "ADD"
										},
										{
											"begin": 5990,
											"end": 6000,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5974,
											"end": 6000,
											"name": "SWAP1"
										},
										{
											"begin": 5974,
											"end": 6000,
											"name": "POP"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "PUSH [tag]",
											"value": "67"
										},
										{
											"begin": 6183,
											"end": 6188,
											"name": "DUP2"
										},
										{
											"begin": 6159,
											"end": 6167,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "DUP1"
										},
										{
											"begin": 6168,
											"end": 6170,
											"name": "DUP6"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "DUP2"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "MSTORE"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "ADD"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "SWAP1"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "DUP2"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "MSTORE"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "ADD"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6159,
											"end": 6171,
											"name": "KECCAK256"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6172,
											"end": 6177,
											"name": "DUP15"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "AND"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "AND"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "DUP2"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "MSTORE"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "ADD"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "SWAP1"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "DUP2"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "MSTORE"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "ADD"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "KECCAK256"
										},
										{
											"begin": 6159,
											"end": 6178,
											"name": "SLOAD"
										},
										{
											"begin": 6159,
											"end": 6182,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 6159,
											"end": 6182,
											"name": "SWAP1"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "SWAP2"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "SWAP1"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "AND"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "tag",
											"value": "67"
										},
										{
											"begin": 6159,
											"end": 6189,
											"name": "JUMPDEST"
										},
										{
											"begin": 6137,
											"end": 6145,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "DUP1"
										},
										{
											"begin": 6146,
											"end": 6148,
											"name": "DUP5"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "DUP2"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "MSTORE"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "ADD"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "SWAP1"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "DUP2"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "MSTORE"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "ADD"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6137,
											"end": 6149,
											"name": "KECCAK256"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6150,
											"end": 6155,
											"name": "DUP14"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "AND"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "AND"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "DUP2"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "MSTORE"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "ADD"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "SWAP1"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "DUP2"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "MSTORE"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "ADD"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6137,
											"end": 6156,
											"name": "KECCAK256"
										},
										{
											"begin": 6137,
											"end": 6189,
											"name": "DUP2"
										},
										{
											"begin": 6137,
											"end": 6189,
											"name": "SWAP1"
										},
										{
											"begin": 6137,
											"end": 6189,
											"name": "SSTORE"
										},
										{
											"begin": 6137,
											"end": 6189,
											"name": "POP"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "PUSH [tag]",
											"value": "69"
										},
										{
											"begin": 6235,
											"end": 6243,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "DUP1"
										},
										{
											"begin": 6244,
											"end": 6246,
											"name": "DUP5"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "DUP2"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "MSTORE"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "ADD"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "SWAP1"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "DUP2"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "MSTORE"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "ADD"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6235,
											"end": 6247,
											"name": "KECCAK256"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6248,
											"end": 6251,
											"name": "DUP13"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "AND"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "AND"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "DUP2"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "MSTORE"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "ADD"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "SWAP1"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "DUP2"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "MSTORE"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "ADD"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "KECCAK256"
										},
										{
											"begin": 6235,
											"end": 6252,
											"name": "SLOAD"
										},
										{
											"begin": 6225,
											"end": 6230,
											"name": "DUP3"
										},
										{
											"begin": 6225,
											"end": 6234,
											"name": "PUSH [tag]",
											"value": "70"
										},
										{
											"begin": 6225,
											"end": 6234,
											"name": "SWAP1"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "SWAP2"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "SWAP1"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "AND"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "tag",
											"value": "69"
										},
										{
											"begin": 6225,
											"end": 6253,
											"name": "JUMPDEST"
										},
										{
											"begin": 6203,
											"end": 6211,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "DUP1"
										},
										{
											"begin": 6212,
											"end": 6214,
											"name": "DUP5"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "DUP2"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "MSTORE"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "ADD"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "SWAP1"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "DUP2"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "MSTORE"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "ADD"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6203,
											"end": 6215,
											"name": "KECCAK256"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6216,
											"end": 6219,
											"name": "DUP13"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "AND"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "AND"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "DUP2"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "MSTORE"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "ADD"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "SWAP1"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "DUP2"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "MSTORE"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "ADD"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "KECCAK256"
										},
										{
											"begin": 6203,
											"end": 6253,
											"name": "DUP2"
										},
										{
											"begin": 6203,
											"end": 6253,
											"name": "SWAP1"
										},
										{
											"begin": 6203,
											"end": 6253,
											"name": "SSTORE"
										},
										{
											"begin": 6203,
											"end": 6253,
											"name": "POP"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "POP"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "POP"
										},
										{
											"begin": 5921,
											"end": 5924,
											"name": "DUP1"
										},
										{
											"begin": 5921,
											"end": 5924,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 5921,
											"end": 5924,
											"name": "ADD"
										},
										{
											"begin": 5921,
											"end": 5924,
											"name": "SWAP1"
										},
										{
											"begin": 5921,
											"end": 5924,
											"name": "POP"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "PUSH [tag]",
											"value": "62"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "JUMP"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "tag",
											"value": "63"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "JUMPDEST"
										},
										{
											"begin": 5884,
											"end": 6264,
											"name": "POP"
										},
										{
											"begin": 6847,
											"end": 6850,
											"name": "DUP7"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "AND"
										},
										{
											"begin": 6840,
											"end": 6845,
											"name": "DUP9"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "AND"
										},
										{
											"begin": 6828,
											"end": 6838,
											"name": "CALLER"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "AND"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB"
										},
										{
											"begin": 6852,
											"end": 6856,
											"name": "DUP10"
										},
										{
											"begin": 6852,
											"end": 6856,
											"name": "DUP10"
										},
										{
											"begin": 6858,
											"end": 6865,
											"name": "DUP10"
										},
										{
											"begin": 6858,
											"end": 6865,
											"name": "DUP10"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MLOAD"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP1"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP1"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "ADD"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP1"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "ADD"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP4"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SUB"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP4"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MSTORE"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP8"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP8"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP3"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MSTORE"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "ADD"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SWAP3"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MUL"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP4"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SUB"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP3"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MSTORE"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP6"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP6"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP3"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MSTORE"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "ADD"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SWAP3"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MUL"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SWAP7"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "POP"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "MLOAD"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "DUP1"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SWAP2"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SUB"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "SWAP1"
										},
										{
											"begin": 6814,
											"end": 6866,
											"name": "LOG4"
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "PUSH [tag]",
											"value": "71"
										},
										{
											"begin": 7027,
											"end": 7030,
											"name": "DUP8"
										},
										{
											"begin": 7027,
											"end": 7041,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7027,
											"end": 7041,
											"name": "AND"
										},
										{
											"begin": 7027,
											"end": 7041,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "tag",
											"value": "71"
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "JUMPDEST"
										},
										{
											"begin": 7023,
											"end": 7151,
											"name": "ISZERO"
										},
										{
											"begin": 7023,
											"end": 7151,
											"name": "PUSH [tag]",
											"value": "73"
										},
										{
											"begin": 7023,
											"end": 7151,
											"name": "JUMPI"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH [tag]",
											"value": "74"
										},
										{
											"begin": 7095,
											"end": 7105,
											"name": "CALLER"
										},
										{
											"begin": 7107,
											"end": 7112,
											"name": "DUP10"
										},
										{
											"begin": 7114,
											"end": 7117,
											"name": "DUP10"
										},
										{
											"begin": 7119,
											"end": 7123,
											"name": "DUP10"
										},
										{
											"begin": 7119,
											"end": 7123,
											"name": "DUP10"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MUL"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MLOAD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MSTORE"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP3"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MSTORE"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MUL"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7125,
											"end": 7132,
											"name": "DUP9"
										},
										{
											"begin": 7125,
											"end": 7132,
											"name": "DUP9"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MUL"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MLOAD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MSTORE"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP3"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MSTORE"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MUL"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7134,
											"end": 7139,
											"name": "DUP8"
										},
										{
											"begin": 7134,
											"end": 7139,
											"name": "DUP8"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DIV"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MUL"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MLOAD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MSTORE"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP3"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "SWAP1"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP2"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "MSTORE"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "ADD"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP4"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "POP"
										},
										{
											"begin": 7059,
											"end": 7094,
											"name": "PUSH [tag]",
											"value": "75"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "tag",
											"value": "74"
										},
										{
											"begin": 7059,
											"end": 7140,
											"name": "JUMPDEST"
										},
										{
											"begin": 7023,
											"end": 7151,
											"name": "tag",
											"value": "73"
										},
										{
											"begin": 7023,
											"end": 7151,
											"name": "JUMPDEST"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "POP"
										},
										{
											"begin": 5389,
											"end": 7157,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "JUMPDEST"
										},
										{
											"begin": 8169,
											"end": 8185,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 8224,
											"end": 8228,
											"name": "DUP3"
										},
										{
											"begin": 8224,
											"end": 8228,
											"name": "DUP3"
										},
										{
											"begin": 8224,
											"end": 8235,
											"name": "SWAP1"
										},
										{
											"begin": 8224,
											"end": 8235,
											"name": "POP"
										},
										{
											"begin": 8206,
											"end": 8213,
											"name": "DUP6"
										},
										{
											"begin": 8206,
											"end": 8213,
											"name": "DUP6"
										},
										{
											"begin": 8206,
											"end": 8220,
											"name": "SWAP1"
										},
										{
											"begin": 8206,
											"end": 8220,
											"name": "POP"
										},
										{
											"begin": 8206,
											"end": 8235,
											"name": "EQ"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "PUSH [tag]",
											"value": "77"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "JUMPI"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "DUP1"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "REVERT"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "tag",
											"value": "77"
										},
										{
											"begin": 8198,
											"end": 8236,
											"name": "JUMPDEST"
										},
										{
											"begin": 8247,
											"end": 8273,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 8290,
											"end": 8297,
											"name": "DUP6"
										},
										{
											"begin": 8290,
											"end": 8297,
											"name": "DUP6"
										},
										{
											"begin": 8290,
											"end": 8304,
											"name": "SWAP1"
										},
										{
											"begin": 8290,
											"end": 8304,
											"name": "POP"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "MLOAD"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "SWAP1"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "DUP1"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "DUP3"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "MSTORE"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "DUP1"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "MUL"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "ADD"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "DUP3"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "ADD"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "MSTORE"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "DUP1"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "ISZERO"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "JUMPI"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "DUP2"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "ADD"
										},
										{
											"begin": 29,
											"end": 31,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 32,
											"name": "MUL"
										},
										{
											"begin": 117,
											"end": 121,
											"name": "DUP1"
										},
										{
											"begin": 105,
											"end": 115,
											"name": "CODESIZE"
										},
										{
											"begin": 97,
											"end": 103,
											"name": "DUP4"
										},
										{
											"begin": 88,
											"end": 122,
											"name": "CODECOPY"
										},
										{
											"begin": 148,
											"end": 152,
											"name": "DUP1"
										},
										{
											"begin": 140,
											"end": 146,
											"name": "DUP3"
										},
										{
											"begin": 136,
											"end": 153,
											"name": "ADD"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "SWAP2"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 157,
											"name": "POP"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "SWAP1"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "POP"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "tag",
											"value": "78"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "JUMPDEST"
										},
										{
											"begin": 8276,
											"end": 8305,
											"name": "POP"
										},
										{
											"begin": 8247,
											"end": 8305,
											"name": "SWAP1"
										},
										{
											"begin": 8247,
											"end": 8305,
											"name": "POP"
										},
										{
											"begin": 8321,
											"end": 8330,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8333,
											"end": 8334,
											"name": "DUP1"
										},
										{
											"begin": 8321,
											"end": 8334,
											"name": "SWAP1"
										},
										{
											"begin": 8321,
											"end": 8334,
											"name": "POP"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "tag",
											"value": "79"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "JUMPDEST"
										},
										{
											"begin": 8340,
											"end": 8347,
											"name": "DUP7"
										},
										{
											"begin": 8340,
											"end": 8347,
											"name": "DUP7"
										},
										{
											"begin": 8340,
											"end": 8354,
											"name": "SWAP1"
										},
										{
											"begin": 8340,
											"end": 8354,
											"name": "POP"
										},
										{
											"begin": 8336,
											"end": 8337,
											"name": "DUP2"
										},
										{
											"begin": 8336,
											"end": 8354,
											"name": "LT"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "ISZERO"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "PUSH [tag]",
											"value": "80"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "JUMPI"
										},
										{
											"begin": 8390,
											"end": 8398,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "DUP1"
										},
										{
											"begin": 8399,
											"end": 8403,
											"name": "DUP7"
										},
										{
											"begin": 8399,
											"end": 8403,
											"name": "DUP7"
										},
										{
											"begin": 8404,
											"end": 8405,
											"name": "DUP5"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "DUP2"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "DUP2"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "LT"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "PUSH [tag]",
											"value": "82"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "JUMPI"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "INVALID"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "tag",
											"value": "82"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "JUMPDEST"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "SWAP1"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "POP"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "MUL"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "ADD"
										},
										{
											"begin": 8399,
											"end": 8406,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "DUP2"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "MSTORE"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "ADD"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "SWAP1"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "DUP2"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "MSTORE"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "ADD"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8390,
											"end": 8407,
											"name": "KECCAK256"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8408,
											"end": 8415,
											"name": "DUP9"
										},
										{
											"begin": 8408,
											"end": 8415,
											"name": "DUP9"
										},
										{
											"begin": 8416,
											"end": 8417,
											"name": "DUP5"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "DUP2"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "DUP2"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "LT"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "PUSH [tag]",
											"value": "83"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "JUMPI"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "INVALID"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "tag",
											"value": "83"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "JUMPDEST"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "SWAP1"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "POP"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "MUL"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "ADD"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8408,
											"end": 8418,
											"name": "AND"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "AND"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "AND"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "DUP2"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "MSTORE"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "ADD"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "SWAP1"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "DUP2"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "MSTORE"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "ADD"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "KECCAK256"
										},
										{
											"begin": 8390,
											"end": 8419,
											"name": "SLOAD"
										},
										{
											"begin": 8375,
											"end": 8384,
											"name": "DUP3"
										},
										{
											"begin": 8385,
											"end": 8386,
											"name": "DUP3"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "DUP2"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "MLOAD"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "DUP2"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "LT"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "PUSH [tag]",
											"value": "84"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "JUMPI"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "INVALID"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "tag",
											"value": "84"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "JUMPDEST"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "MUL"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "ADD"
										},
										{
											"begin": 8375,
											"end": 8387,
											"name": "ADD"
										},
										{
											"begin": 8375,
											"end": 8419,
											"name": "DUP2"
										},
										{
											"begin": 8375,
											"end": 8419,
											"name": "DUP2"
										},
										{
											"begin": 8375,
											"end": 8419,
											"name": "MSTORE"
										},
										{
											"begin": 8375,
											"end": 8419,
											"name": "POP"
										},
										{
											"begin": 8375,
											"end": 8419,
											"name": "POP"
										},
										{
											"begin": 8356,
											"end": 8359,
											"name": "DUP1"
										},
										{
											"begin": 8356,
											"end": 8359,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 8356,
											"end": 8359,
											"name": "ADD"
										},
										{
											"begin": 8356,
											"end": 8359,
											"name": "SWAP1"
										},
										{
											"begin": 8356,
											"end": 8359,
											"name": "POP"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "PUSH [tag]",
											"value": "79"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "JUMP"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "tag",
											"value": "80"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "JUMPDEST"
										},
										{
											"begin": 8316,
											"end": 8430,
											"name": "POP"
										},
										{
											"begin": 8447,
											"end": 8456,
											"name": "DUP1"
										},
										{
											"begin": 8440,
											"end": 8456,
											"name": "SWAP2"
										},
										{
											"begin": 8440,
											"end": 8456,
											"name": "POP"
										},
										{
											"begin": 8440,
											"end": 8456,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP5"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "SWAP4"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "POP"
										},
										{
											"begin": 8069,
											"end": 8463,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "tag",
											"value": "43"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "JUMPDEST"
										},
										{
											"begin": 8940,
											"end": 8949,
											"name": "DUP1"
										},
										{
											"begin": 8898,
											"end": 8914,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8915,
											"end": 8925,
											"name": "CALLER"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "AND"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "AND"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "DUP2"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "MSTORE"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "ADD"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "SWAP1"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "DUP2"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "MSTORE"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "ADD"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8898,
											"end": 8926,
											"name": "KECCAK256"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8927,
											"end": 8936,
											"name": "DUP5"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "AND"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "AND"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "DUP2"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "MSTORE"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "ADD"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "SWAP1"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "DUP2"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "MSTORE"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "ADD"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "KECCAK256"
										},
										{
											"begin": 8898,
											"end": 8937,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "EXP"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "DUP2"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "SLOAD"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "DUP2"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "MUL"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "NOT"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "AND"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "SWAP1"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "DUP4"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "ISZERO"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "ISZERO"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "MUL"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "OR"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "SWAP1"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "SSTORE"
										},
										{
											"begin": 8898,
											"end": 8949,
											"name": "POP"
										},
										{
											"begin": 8991,
											"end": 9000,
											"name": "DUP2"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "AND"
										},
										{
											"begin": 8979,
											"end": 8989,
											"name": "CALLER"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "AND"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "PUSH",
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 9002,
											"end": 9011,
											"name": "DUP4"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "MLOAD"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "DUP1"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "DUP3"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "ISZERO"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "ISZERO"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "ISZERO"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "ISZERO"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "DUP2"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "MSTORE"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "ADD"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "SWAP2"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "POP"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "POP"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "MLOAD"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "DUP1"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "SWAP2"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "SUB"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "SWAP1"
										},
										{
											"begin": 8964,
											"end": 9012,
											"name": "LOG3"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "POP"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "POP"
										},
										{
											"begin": 8817,
											"end": 9019,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "tag",
											"value": "46"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "JUMPDEST"
										},
										{
											"begin": 9382,
											"end": 9386,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9421,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9422,
											"end": 9428,
											"name": "DUP5"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "AND"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "AND"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "DUP2"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "MSTORE"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "ADD"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "SWAP1"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "DUP2"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "MSTORE"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "ADD"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9429,
											"name": "KECCAK256"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9430,
											"end": 9439,
											"name": "DUP4"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "AND"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "AND"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "DUP2"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "MSTORE"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "ADD"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "SWAP1"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "DUP2"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "MSTORE"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "ADD"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "KECCAK256"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "SWAP1"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "SLOAD"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "SWAP1"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "EXP"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "SWAP1"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "DIV"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 9405,
											"end": 9440,
											"name": "AND"
										},
										{
											"begin": 9398,
											"end": 9440,
											"name": "SWAP1"
										},
										{
											"begin": 9398,
											"end": 9440,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP3"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "SWAP2"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "POP"
										},
										{
											"begin": 9298,
											"end": 9447,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "tag",
											"value": "52"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "JUMPDEST"
										},
										{
											"begin": 2980,
											"end": 2983,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "AND"
										},
										{
											"begin": 2965,
											"end": 2968,
											"name": "DUP6"
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "AND"
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "EQ"
										},
										{
											"begin": 2965,
											"end": 2984,
											"name": "ISZERO"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "JUMPI"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "MLOAD"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP2"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "MSTORE"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "ADD"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP1"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP1"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "ADD"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP3"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP2"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "SUB"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP3"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "MSTORE"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "15"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP2"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "MSTORE"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "ADD"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP1"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "5F746F206D757374206265206E6F6E2D7A65726F2E0000000000000000000000"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP2"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "MSTORE"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "POP"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "ADD"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "SWAP2"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "POP"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "POP"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "MLOAD"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "DUP1"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "SWAP2"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "SUB"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "SWAP1"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "REVERT"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "tag",
											"value": "88"
										},
										{
											"begin": 2957,
											"end": 3010,
											"name": "JUMPDEST"
										},
										{
											"begin": 3037,
											"end": 3047,
											"name": "CALLER"
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "AND"
										},
										{
											"begin": 3028,
											"end": 3033,
											"name": "DUP7"
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "AND"
										},
										{
											"begin": 3028,
											"end": 3047,
											"name": "EQ"
										},
										{
											"begin": 3028,
											"end": 3094,
											"name": "DUP1"
										},
										{
											"begin": 3028,
											"end": 3094,
											"name": "PUSH [tag]",
											"value": "89"
										},
										{
											"begin": 3028,
											"end": 3094,
											"name": "JUMPI"
										},
										{
											"begin": 3028,
											"end": 3094,
											"name": "POP"
										},
										{
											"begin": 3090,
											"end": 3094,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3051,
											"end": 3094,
											"name": "ISZERO"
										},
										{
											"begin": 3051,
											"end": 3094,
											"name": "ISZERO"
										},
										{
											"begin": 3051,
											"end": 3067,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3068,
											"end": 3073,
											"name": "DUP9"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "AND"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "AND"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "DUP2"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "MSTORE"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "ADD"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "SWAP1"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "DUP2"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "MSTORE"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "ADD"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3074,
											"name": "KECCAK256"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3085,
											"name": "CALLER"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "AND"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "AND"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "DUP2"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "MSTORE"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "ADD"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "SWAP1"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "DUP2"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "MSTORE"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "ADD"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "KECCAK256"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "SWAP1"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "SLOAD"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "SWAP1"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "EXP"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "SWAP1"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "DIV"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 3051,
											"end": 3086,
											"name": "AND"
										},
										{
											"begin": 3051,
											"end": 3094,
											"name": "ISZERO"
										},
										{
											"begin": 3051,
											"end": 3094,
											"name": "ISZERO"
										},
										{
											"begin": 3051,
											"end": 3094,
											"name": "EQ"
										},
										{
											"begin": 3028,
											"end": 3094,
											"name": "tag",
											"value": "89"
										},
										{
											"begin": 3028,
											"end": 3094,
											"name": "JUMPDEST"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH [tag]",
											"value": "90"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "JUMPI"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "MLOAD"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP2"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "MSTORE"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "ADD"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP1"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP1"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "ADD"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP3"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP2"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "SUB"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP3"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "MSTORE"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "2F"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP2"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "MSTORE"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "ADD"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP1"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH data",
											"value": "849B4236B9CC0954DC0E729AB0ED3552779085D502D2B1DAD4E899FD8211D4BE"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "2F"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "SWAP2"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "CODECOPY"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "ADD"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "SWAP2"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "POP"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "POP"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "MLOAD"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "DUP1"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "SWAP2"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "SUB"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "SWAP1"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "REVERT"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "tag",
											"value": "90"
										},
										{
											"begin": 3020,
											"end": 3146,
											"name": "JUMPDEST"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "PUSH [tag]",
											"value": "91"
										},
										{
											"begin": 3319,
											"end": 3325,
											"name": "DUP4"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "DUP1"
										},
										{
											"begin": 3303,
											"end": 3306,
											"name": "DUP8"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "DUP2"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "MSTORE"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "ADD"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "SWAP1"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "DUP2"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "MSTORE"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "ADD"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3294,
											"end": 3307,
											"name": "KECCAK256"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3308,
											"end": 3313,
											"name": "DUP10"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "AND"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "AND"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "DUP2"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "MSTORE"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "ADD"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "SWAP1"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "DUP2"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "MSTORE"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "ADD"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "KECCAK256"
										},
										{
											"begin": 3294,
											"end": 3314,
											"name": "SLOAD"
										},
										{
											"begin": 3294,
											"end": 3318,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 3294,
											"end": 3318,
											"name": "SWAP1"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "SWAP2"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "SWAP1"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "AND"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "tag",
											"value": "91"
										},
										{
											"begin": 3294,
											"end": 3326,
											"name": "JUMPDEST"
										},
										{
											"begin": 3271,
											"end": 3279,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "DUP1"
										},
										{
											"begin": 3280,
											"end": 3283,
											"name": "DUP7"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "DUP2"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "MSTORE"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "ADD"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "SWAP1"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "DUP2"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "MSTORE"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "ADD"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3271,
											"end": 3284,
											"name": "KECCAK256"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3285,
											"end": 3290,
											"name": "DUP9"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "AND"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "AND"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "DUP2"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "MSTORE"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "ADD"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "SWAP1"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "DUP2"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "MSTORE"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "ADD"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3271,
											"end": 3291,
											"name": "KECCAK256"
										},
										{
											"begin": 3271,
											"end": 3326,
											"name": "DUP2"
										},
										{
											"begin": 3271,
											"end": 3326,
											"name": "SWAP1"
										},
										{
											"begin": 3271,
											"end": 3326,
											"name": "SSTORE"
										},
										{
											"begin": 3271,
											"end": 3326,
											"name": "POP"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "PUSH [tag]",
											"value": "92"
										},
										{
											"begin": 3370,
											"end": 3378,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "DUP1"
										},
										{
											"begin": 3379,
											"end": 3382,
											"name": "DUP7"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "DUP2"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "MSTORE"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "ADD"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "SWAP1"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "DUP2"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "MSTORE"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "ADD"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3370,
											"end": 3383,
											"name": "KECCAK256"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3384,
											"end": 3387,
											"name": "DUP8"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "AND"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "AND"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "DUP2"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "MSTORE"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "ADD"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "SWAP1"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "DUP2"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "MSTORE"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "ADD"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "KECCAK256"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "SLOAD"
										},
										{
											"begin": 3359,
											"end": 3365,
											"name": "DUP5"
										},
										{
											"begin": 3359,
											"end": 3369,
											"name": "PUSH [tag]",
											"value": "70"
										},
										{
											"begin": 3359,
											"end": 3369,
											"name": "SWAP1"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "SWAP2"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "SWAP1"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "AND"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "tag",
											"value": "92"
										},
										{
											"begin": 3359,
											"end": 3389,
											"name": "JUMPDEST"
										},
										{
											"begin": 3336,
											"end": 3344,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "DUP1"
										},
										{
											"begin": 3345,
											"end": 3348,
											"name": "DUP7"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "DUP2"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "MSTORE"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "ADD"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "SWAP1"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "DUP2"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "MSTORE"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "ADD"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3349,
											"name": "KECCAK256"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3350,
											"end": 3353,
											"name": "DUP8"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "AND"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "AND"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "DUP2"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "MSTORE"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "ADD"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "SWAP1"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "DUP2"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "MSTORE"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "ADD"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3336,
											"end": 3354,
											"name": "KECCAK256"
										},
										{
											"begin": 3336,
											"end": 3389,
											"name": "DUP2"
										},
										{
											"begin": 3336,
											"end": 3389,
											"name": "SWAP1"
										},
										{
											"begin": 3336,
											"end": 3389,
											"name": "SSTORE"
										},
										{
											"begin": 3336,
											"end": 3389,
											"name": "POP"
										},
										{
											"begin": 3466,
											"end": 3469,
											"name": "DUP5"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "AND"
										},
										{
											"begin": 3459,
											"end": 3464,
											"name": "DUP7"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "AND"
										},
										{
											"begin": 3447,
											"end": 3457,
											"name": "CALLER"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "AND"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "C3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62"
										},
										{
											"begin": 3471,
											"end": 3474,
											"name": "DUP8"
										},
										{
											"begin": 3476,
											"end": 3482,
											"name": "DUP8"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "MLOAD"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "DUP1"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "DUP4"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "DUP2"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "MSTORE"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "ADD"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "DUP3"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "DUP2"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "MSTORE"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "ADD"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "SWAP3"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "POP"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "POP"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "POP"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "MLOAD"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "DUP1"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "SWAP2"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "SUB"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "SWAP1"
										},
										{
											"begin": 3432,
											"end": 3483,
											"name": "LOG4"
										},
										{
											"begin": 3636,
											"end": 3652,
											"name": "PUSH [tag]",
											"value": "93"
										},
										{
											"begin": 3636,
											"end": 3639,
											"name": "DUP6"
										},
										{
											"begin": 3636,
											"end": 3650,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3636,
											"end": 3650,
											"name": "AND"
										},
										{
											"begin": 3636,
											"end": 3650,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 3636,
											"end": 3652,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3636,
											"end": 3652,
											"name": "tag",
											"value": "93"
										},
										{
											"begin": 3636,
											"end": 3652,
											"name": "JUMPDEST"
										},
										{
											"begin": 3632,
											"end": 3753,
											"name": "ISZERO"
										},
										{
											"begin": 3632,
											"end": 3753,
											"name": "PUSH [tag]",
											"value": "94"
										},
										{
											"begin": 3632,
											"end": 3753,
											"name": "JUMPI"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 3699,
											"end": 3709,
											"name": "CALLER"
										},
										{
											"begin": 3711,
											"end": 3716,
											"name": "DUP8"
										},
										{
											"begin": 3718,
											"end": 3721,
											"name": "DUP8"
										},
										{
											"begin": 3723,
											"end": 3726,
											"name": "DUP8"
										},
										{
											"begin": 3728,
											"end": 3734,
											"name": "DUP8"
										},
										{
											"begin": 3736,
											"end": 3741,
											"name": "DUP8"
										},
										{
											"begin": 3736,
											"end": 3741,
											"name": "DUP8"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP1"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP1"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "ADD"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP1"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "SWAP2"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DIV"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "MUL"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "ADD"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "MLOAD"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "SWAP1"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP2"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "ADD"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "MSTORE"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP1"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "SWAP4"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "SWAP3"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "SWAP2"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "SWAP1"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP2"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP2"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "MSTORE"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "ADD"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP4"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 93,
											"end": 96,
											"name": "DUP2"
										},
										{
											"begin": 85,
											"end": 91,
											"name": "DUP5"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 133,
											"end": 142,
											"name": "NOT"
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 121,
											"end": 124,
											"name": "DUP3"
										},
										{
											"begin": 117,
											"end": 131,
											"name": "ADD"
										},
										{
											"begin": 113,
											"end": 143,
											"name": "AND"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "SWAP1"
										},
										{
											"begin": 106,
											"end": 143,
											"name": "POP"
										},
										{
											"begin": 169,
											"end": 172,
											"name": "DUP1"
										},
										{
											"begin": 161,
											"end": 167,
											"name": "DUP4"
										},
										{
											"begin": 157,
											"end": 173,
											"name": "ADD"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "SWAP3"
										},
										{
											"begin": 147,
											"end": 173,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "POP"
										},
										{
											"begin": 3668,
											"end": 3698,
											"name": "PUSH [tag]",
											"value": "96"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "tag",
											"value": "95"
										},
										{
											"begin": 3668,
											"end": 3742,
											"name": "JUMPDEST"
										},
										{
											"begin": 3632,
											"end": 3753,
											"name": "tag",
											"value": "94"
										},
										{
											"begin": 3632,
											"end": 3753,
											"name": "JUMPDEST"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "POP"
										},
										{
											"begin": 2832,
											"end": 3759,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "tag",
											"value": "68"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "JUMPDEST"
										},
										{
											"begin": 1181,
											"end": 1188,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1212,
											"end": 1213,
											"name": "DUP3"
										},
										{
											"begin": 1207,
											"end": 1208,
											"name": "DUP3"
										},
										{
											"begin": 1207,
											"end": 1213,
											"name": "GT"
										},
										{
											"begin": 1207,
											"end": 1213,
											"name": "ISZERO"
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "PUSH [tag]",
											"value": "98"
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "JUMPI"
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "INVALID"
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "tag",
											"value": "98"
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "JUMPDEST"
										},
										{
											"begin": 1235,
											"end": 1236,
											"name": "DUP2"
										},
										{
											"begin": 1231,
											"end": 1232,
											"name": "DUP4"
										},
										{
											"begin": 1231,
											"end": 1236,
											"name": "SUB"
										},
										{
											"begin": 1224,
											"end": 1236,
											"name": "SWAP1"
										},
										{
											"begin": 1224,
											"end": 1236,
											"name": "POP"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "SWAP3"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "SWAP2"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "POP"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "POP"
										},
										{
											"begin": 1123,
											"end": 1243,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "tag",
											"value": "70"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "JUMPDEST"
										},
										{
											"begin": 1371,
											"end": 1380,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1400,
											"end": 1401,
											"name": "DUP2"
										},
										{
											"begin": 1396,
											"end": 1397,
											"name": "DUP4"
										},
										{
											"begin": 1396,
											"end": 1401,
											"name": "ADD"
										},
										{
											"begin": 1392,
											"end": 1401,
											"name": "SWAP1"
										},
										{
											"begin": 1392,
											"end": 1401,
											"name": "POP"
										},
										{
											"begin": 1423,
											"end": 1424,
											"name": "DUP3"
										},
										{
											"begin": 1418,
											"end": 1419,
											"name": "DUP2"
										},
										{
											"begin": 1418,
											"end": 1424,
											"name": "LT"
										},
										{
											"begin": 1418,
											"end": 1424,
											"name": "ISZERO"
										},
										{
											"begin": 1411,
											"end": 1425,
											"name": "PUSH [tag]",
											"value": "100"
										},
										{
											"begin": 1411,
											"end": 1425,
											"name": "JUMPI"
										},
										{
											"begin": 1411,
											"end": 1425,
											"name": "INVALID"
										},
										{
											"begin": 1411,
											"end": 1425,
											"name": "tag",
											"value": "100"
										},
										{
											"begin": 1411,
											"end": 1425,
											"name": "JUMPDEST"
										},
										{
											"begin": 1442,
											"end": 1443,
											"name": "DUP1"
										},
										{
											"begin": 1435,
											"end": 1443,
											"name": "SWAP1"
										},
										{
											"begin": 1435,
											"end": 1443,
											"name": "POP"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "SWAP3"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "SWAP2"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "POP"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "POP"
										},
										{
											"begin": 1313,
											"end": 1450,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 465,
											"end": 1089,
											"name": "tag",
											"value": "72"
										},
										{
											"begin": 465,
											"end": 1089,
											"name": "JUMPDEST"
										},
										{
											"begin": 525,
											"end": 529,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 541,
											"end": 553,
											"name": "DUP1"
										},
										{
											"begin": 1048,
											"end": 1055,
											"name": "DUP3"
										},
										{
											"begin": 1036,
											"end": 1056,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 1028,
											"end": 1056,
											"name": "SWAP1"
										},
										{
											"begin": 1028,
											"end": 1056,
											"name": "POP"
										},
										{
											"begin": 1081,
											"end": 1082,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1078,
											"name": "DUP2"
										},
										{
											"begin": 1074,
											"end": 1082,
											"name": "GT"
										},
										{
											"begin": 1067,
											"end": 1082,
											"name": "SWAP2"
										},
										{
											"begin": 1067,
											"end": 1082,
											"name": "POP"
										},
										{
											"begin": 1067,
											"end": 1082,
											"name": "POP"
										},
										{
											"begin": 465,
											"end": 1089,
											"name": "SWAP2"
										},
										{
											"begin": 465,
											"end": 1089,
											"name": "SWAP1"
										},
										{
											"begin": 465,
											"end": 1089,
											"name": "POP"
										},
										{
											"begin": 465,
											"end": 1089,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "tag",
											"value": "75"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "JUMPDEST"
										},
										{
											"begin": 311,
											"end": 321,
											"name": "PUSH",
											"value": "BC197C81"
										},
										{
											"begin": 11773,
											"end": 11795,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 11773,
											"end": 11795,
											"name": "SHL"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "NOT"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "AND"
										},
										{
											"begin": 11702,
											"end": 11705,
											"name": "DUP5"
										},
										{
											"begin": 11681,
											"end": 11729,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11729,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11729,
											"name": "PUSH",
											"value": "BC197C81"
										},
										{
											"begin": 11730,
											"end": 11739,
											"name": "DUP9"
										},
										{
											"begin": 11741,
											"end": 11746,
											"name": "DUP9"
										},
										{
											"begin": 11748,
											"end": 11752,
											"name": "DUP8"
										},
										{
											"begin": 11754,
											"end": 11761,
											"name": "DUP8"
										},
										{
											"begin": 11763,
											"end": 11768,
											"name": "DUP8"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP7"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SHL"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP7"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP6"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP5"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP5"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP8"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MUL"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "103"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "105"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "103"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "105"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP5"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP7"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MUL"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "106"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "108"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "106"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "108"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP5"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP3"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP6"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "109"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "111"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "109"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "111"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ISZERO"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH [tag]",
											"value": "112"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "JUMPI"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP3"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "EXP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "NOT"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MSTORE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "tag",
											"value": "112"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "JUMPDEST"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP9"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP4"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SUB"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP8"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "113"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "113"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "GAS"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "CALL"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "114"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "114"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "115"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "115"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "DUP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "MLOAD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "ADD"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP3"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP2"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "SWAP1"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11769,
											"name": "POP"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "NOT"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "AND"
										},
										{
											"begin": 11681,
											"end": 11795,
											"name": "EQ"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH [tag]",
											"value": "116"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "JUMPI"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "MLOAD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP2"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "MSTORE"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "ADD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP1"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP1"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "ADD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP3"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP2"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "SUB"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP3"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "MSTORE"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "3E"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP2"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "MSTORE"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "ADD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP1"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH data",
											"value": "907B1BC15E21FE4233C673581AF2CF868CD5FA614B6015B432FF41FBC0222BAD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "3E"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "SWAP2"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "CODECOPY"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "ADD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "SWAP2"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "POP"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "POP"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "MLOAD"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "DUP1"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "SWAP2"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "SUB"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "SWAP1"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "REVERT"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "tag",
											"value": "116"
										},
										{
											"begin": 11673,
											"end": 11862,
											"name": "JUMPDEST"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "POP"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "POP"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "POP"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "POP"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "POP"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "POP"
										},
										{
											"begin": 10688,
											"end": 11869,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "tag",
											"value": "96"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "JUMPDEST"
										},
										{
											"begin": 164,
											"end": 174,
											"name": "PUSH",
											"value": "F23A6E61"
										},
										{
											"begin": 10597,
											"end": 10613,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 10597,
											"end": 10613,
											"name": "SHL"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "NOT"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "AND"
										},
										{
											"begin": 10533,
											"end": 10536,
											"name": "DUP5"
										},
										{
											"begin": 10512,
											"end": 10555,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10555,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10555,
											"name": "PUSH",
											"value": "F23A6E61"
										},
										{
											"begin": 10556,
											"end": 10565,
											"name": "DUP9"
										},
										{
											"begin": 10567,
											"end": 10572,
											"name": "DUP9"
										},
										{
											"begin": 10574,
											"end": 10577,
											"name": "DUP8"
										},
										{
											"begin": 10579,
											"end": 10585,
											"name": "DUP8"
										},
										{
											"begin": 10587,
											"end": 10592,
											"name": "DUP8"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP7"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SHL"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP7"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP6"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP5"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP4"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP3"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SUB"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP3"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP4"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP4"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "118"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "120"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "118"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "120"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ISZERO"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH [tag]",
											"value": "121"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "JUMPI"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP3"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SUB"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP4"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SUB"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "EXP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SUB"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "NOT"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MSTORE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "tag",
											"value": "121"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "JUMPDEST"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP7"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP4"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SUB"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP8"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "EXTCODESIZE"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "122"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "122"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "GAS"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "CALL"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "123"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "123"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "124"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "124"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "DUP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "MLOAD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "ADD"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP3"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP2"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "SWAP1"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10593,
											"name": "POP"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "NOT"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "AND"
										},
										{
											"begin": 10512,
											"end": 10613,
											"name": "EQ"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH [tag]",
											"value": "125"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "JUMPI"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "MLOAD"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP2"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "MSTORE"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "ADD"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP1"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP1"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "ADD"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP3"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP2"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "SUB"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP3"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "MSTORE"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "39"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP2"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "MSTORE"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "ADD"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP1"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH data",
											"value": "EF98AF68C848ABC187FBA39B58082936B9DE327B8B5FD25AACD07D63C4D89E42"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "39"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "SWAP2"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "CODECOPY"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "ADD"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "SWAP2"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "POP"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "POP"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "MLOAD"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "DUP1"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "SWAP2"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "SUB"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "SWAP1"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "REVERT"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "tag",
											"value": "125"
										},
										{
											"begin": 10504,
											"end": 10675,
											"name": "JUMPDEST"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "POP"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "POP"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "POP"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "POP"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "POP"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "POP"
										},
										{
											"begin": 9554,
											"end": 10682,
											"name": "JUMP",
											"value": "[out]"
										}
									],
									".data": {
										"62FEAA226FE2BAB79230D856B8132C73F9553FB9F97B507F32473583A3BDC412": "64657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d7a65726f2e",
										"849B4236B9CC0954DC0E729AB0ED3552779085D502D2B1DAD4E899FD8211D4BE": "4e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e73666572732e",
										"907B1BC15E21FE4233C673581AF2CF868CD5FA614B6015B432FF41FBC0222BAD": "636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e4552433131353542617463685265636569766564",
										"D06B0E7FC248DF96A03D3F6210AB25CDBD58BA1E3989C7AED9DF538AB45FC969": "5f69647320616e64205f76616c756573206172726179206c656e677468206d757374206d617463682e",
										"EF98AF68C848ABC187FBA39B58082936B9DE327B8B5FD25AACD07D63C4D89E42": "636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address,uint256)": "00fdd58e",
							"balanceOfBatch(address[],uint256[])": "4e1273f4",
							"isApprovedForAll(address,address)": "e985e9c5",
							"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
							"safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_id\":\"ID of the Token\",\"_owner\":\"The address of the token holder\"},\"return\":\"The _owner's balance of the Token type requested\"},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"_ids\":\"ID of the Tokens\",\"_owners\":\"The addresses of the token holders\"},\"return\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"Address of authorized operator\",\"_owner\":\"The owner of the Tokens\"},\"return\":\"True if the operator is approved, false if not\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error. MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\",\"params\":{\"_data\":\"Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\",\"_from\":\"Source address\",\"_ids\":\"IDs of each token type (order and length must match _values array)\",\"_to\":\"Target address\",\"_values\":\"Transfer amounts per token type (order and length must match _ids array)\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\",\"params\":{\"_data\":\"Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\",\"_from\":\"Source address\",\"_id\":\"ID of the token type\",\"_to\":\"Target address\",\"_value\":\"Transfer amount\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"MUST emit the ApprovalForAll event on success.\",\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}}}},\"userdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"keccak256\":\"0x016260fe1d6f563acefd8adb335b05e569b4026e3f8d472c3e855412debb83de\",\"urls\":[\"bzz-raw://701be90d29a315d87757399639b99315e37db64fd8e2157b27888061edebb7ca\",\"dweb:/ipfs/QmfLFj4eVtsF3V3LaxyKe6ZaGkwpR8ip1NV44WaHQ3BV1g\"]},\"contracts/Common.sol\":{\"keccak256\":\"0x900d50cdfedbcf60e9e1ef727674ead98b35abf5a01714ed285989d410c01db8\",\"urls\":[\"bzz-raw://9903b443608607b5f94e85f77d35528baf9adb8c7acc70bc0818437a251f4c8b\",\"dweb:/ipfs/QmRHVoDnjh7ihKZJCXbsVwMEodGEtKBE1wJcvxqkqec2R2\"]},\"contracts/ERC1155.sol\":{\"keccak256\":\"0x3d273a8248dcec646a318c1e3a03a153ac03ac321a9ad675947d43e669342451\",\"urls\":[\"bzz-raw://d8fa0eab51c61e285f1bb6303746af1e1eab511a89ae9144392e37e2ae547b3e\",\"dweb:/ipfs/QmR2nEYeUQUxyrkkNfnwgvSbYi6b5xKVq34NtH8mF83wRd\"]},\"contracts/ERC165.sol\":{\"keccak256\":\"0x70660c2c79f0ce447bf70065ef2d3762e0e87198879c2f6fbe75f04b25dd1ddd\",\"urls\":[\"bzz-raw://a4708cdc3840887ec63c82fdf9e2d74fec8b811ccdff18a04a07e15837221b70\",\"dweb:/ipfs/QmYQAbcWu8jREJg3S2ZqeRNCCp6su2ysqgzDTUYAdrvWfc\"]},\"contracts/IERC1155.sol\":{\"keccak256\":\"0x3afca766825d028e9de27b09a0165887653a5c808bbb7fd5c1fb3507652c5bf6\",\"urls\":[\"bzz-raw://027390d281f19afee178af8bfaaf0e622e8b6a22ef96abe5899dc2421457b730\",\"dweb:/ipfs/QmZnw3VewsnoLja6BbmAFcCV9AakLFG4vJaeq8VriJMRJZ\"]},\"contracts/IERC1155TokenReceiver.sol\":{\"keccak256\":\"0x9a17debe190dd4ef63e25ead5884cdfc60a954bde410444123f1e1fedb563ba3\",\"urls\":[\"bzz-raw://832d87678d57f664e60ba4231d0db4592e9e899d25844d06dd60a213aacd68e9\",\"dweb:/ipfs/QmTDHy4nZgeiTFgELZb4nZPSsE44UEHHtouLspvdzK9sMb\"]},\"contracts/SafeMath.sol\":{\"keccak256\":\"0xb6b65a22ef7f6aabecc727a68ecaf25ff8bd381769f1eb34ab8d8bf11bc159ec\",\"urls\":[\"bzz-raw://1ec48f7930d1df622d823386118708d738c5f7c31ee499f8e1a1f204de4de10e\",\"dweb:/ipfs/QmSeNFHGDUn1Wx4opcgn3hz1HWn1BSzsWdsCkf7UKDV5kE\"]}},\"version\":1}",
					"userdoc": {
						"methods": {
							"balanceOf(address,uint256)": {
								"notice": "Get the balance of an account's Tokens."
							},
							"balanceOfBatch(address[],uint256[])": {
								"notice": "Get the balance of multiple account/token pairs"
							},
							"isApprovedForAll(address,address)": {
								"notice": "Queries the approval status of an operator for a given owner."
							},
							"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
								"notice": "Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call)."
							},
							"safeTransferFrom(address,address,uint256,uint256,bytes)": {
								"notice": "Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call)."
							},
							"setApprovalForAll(address,bool)": {
								"notice": "Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens."
							}
						}
					}
				}
			},
			"contracts/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "_interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Interface identification is specified in ERC-165. This function uses less than 30,000 gas.",
								"params": {
									"_interfaceId": "The interface identifier, as specified in ERC-165"
								}
							}
						},
						"title": "ERC165"
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function uses less than 30,000 gas.\",\"params\":{\"_interfaceId\":\"The interface identifier, as specified in ERC-165\"}}},\"title\":\"ERC165\"},\"userdoc\":{\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC165.sol\":{\"keccak256\":\"0x70660c2c79f0ce447bf70065ef2d3762e0e87198879c2f6fbe75f04b25dd1ddd\",\"urls\":[\"bzz-raw://a4708cdc3840887ec63c82fdf9e2d74fec8b811ccdff18a04a07e15837221b70\",\"dweb:/ipfs/QmYQAbcWu8jREJg3S2ZqeRNCCp6su2ysqgzDTUYAdrvWfc\"]}},\"version\":1}",
					"userdoc": {
						"methods": {
							"supportsInterface(bytes4)": {
								"notice": "Query if a contract implements an interface"
							}
						}
					}
				}
			},
			"contracts/IERC1155.sol": {
				"IERC1155": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "_values",
									"type": "uint256[]"
								}
							],
							"name": "TransferBatch",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "TransferSingle",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "_value",
									"type": "string"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								}
							],
							"name": "URI",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_owners",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								}
							],
							"name": "balanceOfBatch",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_values",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeBatchTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md Note: The ERC-165 identifier for this interface is 0xd9b67a26.",
						"methods": {
							"balanceOf(address,uint256)": {
								"params": {
									"_id": "ID of the Token",
									"_owner": "The address of the token holder"
								},
								"return": "The _owner's balance of the Token type requested"
							},
							"balanceOfBatch(address[],uint256[])": {
								"params": {
									"_ids": "ID of the Tokens",
									"_owners": "The addresses of the token holders"
								},
								"return": "The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)"
							},
							"isApprovedForAll(address,address)": {
								"params": {
									"_operator": "Address of authorized operator",
									"_owner": "The owner of the Tokens"
								},
								"return": "True if the operator is approved, false if not"
							},
							"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
								"details": "Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error. MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).",
								"params": {
									"_data": "Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`",
									"_from": "Source address",
									"_ids": "IDs of each token type (order and length must match _values array)",
									"_to": "Target address",
									"_values": "Transfer amounts per token type (order and length must match _ids array)"
								}
							},
							"safeTransferFrom(address,address,uint256,uint256,bytes)": {
								"details": "Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).",
								"params": {
									"_data": "Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`",
									"_from": "Source address",
									"_id": "ID of the token type",
									"_to": "Target address",
									"_value": "Transfer amount"
								}
							},
							"setApprovalForAll(address,bool)": {
								"details": "MUST emit the ApprovalForAll event on success.",
								"params": {
									"_approved": "True if the operator is approved, false to revoke approval",
									"_operator": "Address to add to the set of authorized operators"
								}
							}
						},
						"title": "ERC-1155 Multi Token Standard"
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"balanceOf(address,uint256)": "00fdd58e",
							"balanceOfBatch(address[],uint256[])": "4e1273f4",
							"isApprovedForAll(address,address)": "e985e9c5",
							"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": "2eb2c2d6",
							"safeTransferFrom(address,address,uint256,uint256,bytes)": "f242432a",
							"setApprovalForAll(address,bool)": "a22cb465"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md Note: The ERC-165 identifier for this interface is 0xd9b67a26.\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_id\":\"ID of the Token\",\"_owner\":\"The address of the token holder\"},\"return\":\"The _owner's balance of the Token type requested\"},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"_ids\":\"ID of the Tokens\",\"_owners\":\"The addresses of the token holders\"},\"return\":\"The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\"},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"Address of authorized operator\",\"_owner\":\"The owner of the Tokens\"},\"return\":\"True if the operator is approved, false if not\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if length of `_ids` is not the same as length of `_values`. MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient. MUST revert on any other error. MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard). Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc). After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\",\"params\":{\"_data\":\"Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\",\"_from\":\"Source address\",\"_ids\":\"IDs of each token type (order and length must match _values array)\",\"_to\":\"Target address\",\"_values\":\"Transfer amounts per token type (order and length must match _ids array)\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard). MUST revert if `_to` is the zero address. MUST revert if balance of holder for token `_id` is lower than the `_value` sent. MUST revert on any other error. MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard). After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\",\"params\":{\"_data\":\"Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\",\"_from\":\"Source address\",\"_id\":\"ID of the token type\",\"_to\":\"Target address\",\"_value\":\"Transfer amount\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"MUST emit the ApprovalForAll event on success.\",\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}}},\"title\":\"ERC-1155 Multi Token Standard\"},\"userdoc\":{\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Get the balance of an account's Tokens.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Get the balance of multiple account/token pairs\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC165.sol\":{\"keccak256\":\"0x70660c2c79f0ce447bf70065ef2d3762e0e87198879c2f6fbe75f04b25dd1ddd\",\"urls\":[\"bzz-raw://a4708cdc3840887ec63c82fdf9e2d74fec8b811ccdff18a04a07e15837221b70\",\"dweb:/ipfs/QmYQAbcWu8jREJg3S2ZqeRNCCp6su2ysqgzDTUYAdrvWfc\"]},\"contracts/IERC1155.sol\":{\"keccak256\":\"0x3afca766825d028e9de27b09a0165887653a5c808bbb7fd5c1fb3507652c5bf6\",\"urls\":[\"bzz-raw://027390d281f19afee178af8bfaaf0e622e8b6a22ef96abe5899dc2421457b730\",\"dweb:/ipfs/QmZnw3VewsnoLja6BbmAFcCV9AakLFG4vJaeq8VriJMRJZ\"]}},\"version\":1}",
					"userdoc": {
						"methods": {
							"balanceOf(address,uint256)": {
								"notice": "Get the balance of an account's Tokens."
							},
							"balanceOfBatch(address[],uint256[])": {
								"notice": "Get the balance of multiple account/token pairs"
							},
							"isApprovedForAll(address,address)": {
								"notice": "Queries the approval status of an operator for a given owner."
							},
							"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
								"notice": "Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call)."
							},
							"safeTransferFrom(address,address,uint256,uint256,bytes)": {
								"notice": "Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call)."
							},
							"setApprovalForAll(address,bool)": {
								"notice": "Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens."
							}
						}
					}
				}
			},
			"contracts/IERC1155TokenReceiver.sol": {
				"ERC1155TokenReceiver": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "_ids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_values",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "onERC1155BatchReceived",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "onERC1155Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
								"details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated. This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s). This function MUST revert if it rejects the transfer(s). Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.",
								"params": {
									"_data": "Additional data with no specified format",
									"_from": "The address which previously owned the token",
									"_ids": "An array containing ids of each token being transferred (order and length must match _values array)",
									"_operator": "The address which initiated the batch transfer (i.e. msg.sender)",
									"_values": "An array containing amounts of each token being transferred (order and length must match _ids array)"
								},
								"return": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`"
							},
							"onERC1155Received(address,address,uint256,uint256,bytes)": {
								"details": "An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated. This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer. This function MUST revert if it rejects the transfer. Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.",
								"params": {
									"_data": "Additional data with no specified format",
									"_from": "The address which previously owned the token",
									"_id": "The ID of the token being transferred",
									"_operator": "The address which initiated the transfer (i.e. msg.sender)",
									"_value": "The amount of tokens being transferred"
								},
								"return": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`"
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
							"onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated. This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s). This function MUST revert if it rejects the transfer(s). Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format\",\"_from\":\"The address which previously owned the token\",\"_ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"_operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"_values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"return\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated. This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer. This function MUST revert if it rejects the transfer. Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\",\"params\":{\"_data\":\"Additional data with no specified format\",\"_from\":\"The address which previously owned the token\",\"_id\":\"The ID of the token being transferred\",\"_operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"_value\":\"The amount of tokens being transferred\"},\"return\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\"}}},\"userdoc\":{\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handle the receipt of multiple ERC1155 token types.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle the receipt of a single ERC1155 token type.\"}},\"notice\":\"Note: The ERC-165 identifier for this interface is 0x4e2312e0.\"}},\"settings\":{\"compilationTarget\":{\"contracts/IERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC1155TokenReceiver.sol\":{\"keccak256\":\"0x9a17debe190dd4ef63e25ead5884cdfc60a954bde410444123f1e1fedb563ba3\",\"urls\":[\"bzz-raw://832d87678d57f664e60ba4231d0db4592e9e899d25844d06dd60a213aacd68e9\",\"dweb:/ipfs/QmTDHy4nZgeiTFgELZb4nZPSsE44UEHHtouLspvdzK9sMb\"]}},\"version\":1}",
					"userdoc": {
						"methods": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
								"notice": "Handle the receipt of multiple ERC1155 token types."
							},
							"onERC1155Received(address,address,uint256,uint256,bytes)": {
								"notice": "Handle the receipt of a single ERC1155 token type."
							}
						},
						"notice": "Note: The ERC-165 identifier for this interface is 0x4e2312e0."
					}
				}
			},
			"contracts/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Math operations with safety checks that throw on error",
						"methods": {},
						"title": "SafeMath"
					},
					"evm": {
						"assembly": "    /* \"contracts/SafeMath.sol\":116:1452  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SafeMath.sol\":116:1452  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a72315820ce90038dd0b5b0282dd1e6aa1dee57ca7ead31451997cabb389561eb0f45eedd64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820ce90038dd0b5b0282dd1e6aa1dee57ca7ead31451997cabb389561eb0f45eedd64736f6c63430005110032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xCE SWAP1 SUB DUP14 0xD0 0xB5 0xB0 0x28 0x2D 0xD1 0xE6 0xAA SAR 0xEE JUMPI 0xCA PUSH31 0xAD31451997CABB389561EB0F45EEDD64736F6C634300051100320000000000 ",
							"sourceMap": "116:1336:6:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820ce90038dd0b5b0282dd1e6aa1dee57ca7ead31451997cabb389561eb0f45eedd64736f6c63430005110032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xCE SWAP1 SUB DUP14 0xD0 0xB5 0xB0 0x28 0x2D 0xD1 0xE6 0xAA SAR 0xEE JUMPI 0xCA PUSH31 0xAD31451997CABB389561EB0F45EEDD64736F6C634300051100320000000000 ",
							"sourceMap": "116:1336:6:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 116,
									"end": 1452,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 116,
									"end": 1452,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820ce90038dd0b5b0282dd1e6aa1dee57ca7ead31451997cabb389561eb0f45eedd64736f6c63430005110032",
									".code": [
										{
											"begin": 116,
											"end": 1452,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "ADDRESS"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "EQ"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "MSTORE"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "DUP1"
										},
										{
											"begin": 116,
											"end": 1452,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Math operations with safety checks that throw on error\",\"methods\":{},\"title\":\"SafeMath\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SafeMath.sol\":{\"keccak256\":\"0xb6b65a22ef7f6aabecc727a68ecaf25ff8bd381769f1eb34ab8d8bf11bc159ec\",\"urls\":[\"bzz-raw://1ec48f7930d1df622d823386118708d738c5f7c31ee499f8e1a1f204de4de10e\",\"dweb:/ipfs/QmSeNFHGDUn1Wx4opcgn3hz1HWn1BSzsWdsCkf7UKDV5kE\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contracts/Address.sol": {
				"ast": {
					"absolutePath": "contracts/Address.sol",
					"exportedSymbols": {
						"Address": [
							18
						]
					},
					"id": 19,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "Utility library of inline functions on addresses",
							"fullyImplemented": true,
							"id": 18,
							"linearizedBaseContracts": [
								18
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 16,
										"nodeType": "Block",
										"src": "531:558:0",
										"statements": [
											{
												"assignments": [
													9
												],
												"declarations": [
													{
														"constant": false,
														"id": 9,
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 16,
														"src": "541:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 8,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "541:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 10,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "541:12:0"
											},
											{
												"externalReferences": [
													{
														"size": {
															"declaration": 9,
															"isOffset": false,
															"isSlot": false,
															"src": "1028:4:0",
															"valueSize": 1
														}
													},
													{
														"account": {
															"declaration": 3,
															"isOffset": false,
															"isSlot": false,
															"src": "1048:7:0",
															"valueSize": 1
														}
													}
												],
												"id": 11,
												"nodeType": "InlineAssembly",
												"operations": "{ size := extcodesize(account) }",
												"src": "1017:41:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 12,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "1074:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 13,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1081:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1074:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 7,
												"id": 15,
												"nodeType": "Return",
												"src": "1067:15:0"
											}
										]
									},
									"documentation": "Returns whether the target address is a contract\n@dev This function will return false if invoked during the constructor of a contract,\nas the code is not actually created until after the constructor finishes.\n@param account address of the account to check\n@return whether the target address is a contract",
									"id": 17,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "485:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "485:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "484:17:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "525:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 5,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "525:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "524:6:0"
									},
									"scope": 18,
									"src": "465:624:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 19,
							"src": "86:1006:0"
						}
					],
					"src": "0:1093:0"
				},
				"id": 0
			},
			"contracts/Common.sol": {
				"ast": {
					"absolutePath": "contracts/Common.sol",
					"exportedSymbols": {
						"CommonConstants": [
							27
						]
					},
					"id": 28,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 20,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:1"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": "Note: Simple contract to use as base for const vals",
							"fullyImplemented": true,
							"id": 27,
							"linearizedBaseContracts": [
								27
							],
							"name": "CommonConstants",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 23,
									"name": "ERC1155_ACCEPTED",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "120:54:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 21,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "120:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30786632336136653631",
										"id": 22,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "164:10:1",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4063915617_by_1",
											"typeString": "int_const 4063915617"
										},
										"value": "0xf23a6e61"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 26,
									"name": "ERC1155_BATCH_ACCEPTED",
									"nodeType": "VariableDeclaration",
									"scope": 27,
									"src": "261:60:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 24,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "261:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30786263313937633831",
										"id": 25,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:10:1",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3155786881_by_1",
											"typeString": "int_const 3155786881"
										},
										"value": "0xbc197c81"
									},
									"visibility": "internal"
								}
							],
							"scope": 28,
							"src": "88:326:1"
						}
					],
					"src": "0:415:1"
				},
				"id": 1
			},
			"contracts/ERC1155.sol": {
				"ast": {
					"absolutePath": "contracts/ERC1155.sol",
					"exportedSymbols": {
						"ERC1155": [
							493
						]
					},
					"id": 494,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 29,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:2"
						},
						{
							"absolutePath": "contracts/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 30,
							"nodeType": "ImportDirective",
							"scope": 494,
							"sourceUnit": 742,
							"src": "25:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Address.sol",
							"file": "./Address.sol",
							"id": 31,
							"nodeType": "ImportDirective",
							"scope": 494,
							"sourceUnit": 19,
							"src": "50:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Common.sol",
							"file": "./Common.sol",
							"id": 32,
							"nodeType": "ImportDirective",
							"scope": 494,
							"sourceUnit": 28,
							"src": "74:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/IERC1155TokenReceiver.sol",
							"file": "./IERC1155TokenReceiver.sol",
							"id": 33,
							"nodeType": "ImportDirective",
							"scope": 494,
							"sourceUnit": 648,
							"src": "97:37:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/IERC1155.sol",
							"file": "./IERC1155.sol",
							"id": 34,
							"nodeType": "ImportDirective",
							"scope": 494,
							"sourceUnit": 613,
							"src": "135:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 35,
										"name": "IERC1155",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 612,
										"src": "234:8:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC1155_$612",
											"typeString": "contract IERC1155"
										}
									},
									"id": 36,
									"nodeType": "InheritanceSpecifier",
									"src": "234:8:2"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 37,
										"name": "ERC165",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 503,
										"src": "244:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC165_$503",
											"typeString": "contract ERC165"
										}
									},
									"id": 38,
									"nodeType": "InheritanceSpecifier",
									"src": "244:6:2"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 39,
										"name": "CommonConstants",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 27,
										"src": "252:15:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_CommonConstants_$27",
											"typeString": "contract CommonConstants"
										}
									},
									"id": 40,
									"nodeType": "InheritanceSpecifier",
									"src": "252:15:2"
								}
							],
							"contractDependencies": [
								27,
								503,
								612
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 493,
							"linearizedBaseContracts": [
								493,
								27,
								503,
								612
							],
							"name": "ERC1155",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 43,
									"libraryName": {
										"contractScope": null,
										"id": 41,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 741,
										"src": "280:8:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$741",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "274:27:2",
									"typeName": {
										"id": 42,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "293:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 46,
									"libraryName": {
										"contractScope": null,
										"id": 44,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 18,
										"src": "312:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$18",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "306:26:2",
									"typeName": {
										"id": 45,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "324:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"constant": false,
									"id": 52,
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"scope": 493,
									"src": "370:66:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(uint256 => mapping(address => uint256))"
									},
									"typeName": {
										"id": 51,
										"keyType": {
											"id": 47,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "379:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "370:48:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(uint256 => mapping(address => uint256))"
										},
										"valueType": {
											"id": 50,
											"keyType": {
												"id": 48,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "398:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "390:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 49,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "409:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 58,
									"name": "operatorApproval",
									"nodeType": "VariableDeclaration",
									"scope": 493,
									"src": "482:71:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 57,
										"keyType": {
											"id": 53,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "491:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "482:45:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 56,
											"keyType": {
												"id": 54,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "510:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "502:24:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 55,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "521:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 61,
									"name": "INTERFACE_SIGNATURE_ERC165",
									"nodeType": "VariableDeclaration",
									"scope": 493,
									"src": "729:63:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 59,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "729:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30783031666663396137",
										"id": 60,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "782:10:2",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_33540519_by_1",
											"typeString": "int_const 33540519"
										},
										"value": "0x01ffc9a7"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 64,
									"name": "INTERFACE_SIGNATURE_ERC1155",
									"nodeType": "VariableDeclaration",
									"scope": 493,
									"src": "1248:64:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 62,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "1248:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30786439623637613236",
										"id": 63,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1302:10:2",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3652614694_by_1",
											"typeString": "int_const 3652614694"
										},
										"value": "0xd9b67a26"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 84,
										"nodeType": "Block",
										"src": "1406:186:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 73,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 71,
															"name": "_interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 66,
															"src": "1421:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"argumentTypes": null,
															"id": 72,
															"name": "INTERFACE_SIGNATURE_ERC165",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 61,
															"src": "1437:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "1421:42:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 74,
															"name": "_interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 66,
															"src": "1480:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"argumentTypes": null,
															"id": 75,
															"name": "INTERFACE_SIGNATURE_ERC1155",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 64,
															"src": "1496:27:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "1480:43:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1421:102:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 81,
												"nodeType": "IfStatement",
												"src": "1417:145:2",
												"trueBody": {
													"id": 80,
													"nodeType": "Block",
													"src": "1525:37:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 78,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1546:4:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 70,
															"id": 79,
															"nodeType": "Return",
															"src": "1539:11:2"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "66616c7365",
													"id": 82,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1580:5:2",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 70,
												"id": 83,
												"nodeType": "Return",
												"src": "1573:12:2"
											}
										]
									},
									"documentation": null,
									"id": 85,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"name": "_interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "1346:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 65,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1346:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1345:21:2"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "1400:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 68,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1399:6:2"
									},
									"scope": 493,
									"src": "1319:273:2",
									"stateMutability": "view",
									"superFunction": 502,
									"visibility": "public"
								},
								{
									"body": {
										"id": 178,
										"nodeType": "Block",
										"src": "2946:813:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 99,
																"name": "_to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 89,
																"src": "2965:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "307830",
																		"id": 101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2980:3:2",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0x0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 100,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2972:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 102,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2972:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2965:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5f746f206d757374206265206e6f6e2d7a65726f2e",
															"id": 104,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2986:23:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f0ab27c7656312f7e42f97895baa9fbdc438c4b74c263007cccc2cd44408ee3f",
																"typeString": "literal_string \"_to must be non-zero.\""
															},
															"value": "_to must be non-zero."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f0ab27c7656312f7e42f97895baa9fbdc438c4b74c263007cccc2cd44408ee3f",
																"typeString": "literal_string \"_to must be non-zero.\""
															}
														],
														"id": 98,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "2957:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2957:53:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "2957:53:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 108,
																	"name": "_from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 87,
																	"src": "3028:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 109,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 756,
																		"src": "3037:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "3037:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "3028:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 112,
																			"name": "operatorApproval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 58,
																			"src": "3051:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																				"typeString": "mapping(address => mapping(address => bool))"
																			}
																		},
																		"id": 114,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 113,
																			"name": "_from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 87,
																			"src": "3068:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3051:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 117,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 115,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 756,
																			"src": "3075:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "3075:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3051:35:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 118,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3090:4:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3051:43:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3028:66:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e73666572732e",
															"id": 121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3096:49:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be",
																"typeString": "literal_string \"Need operator approval for 3rd party transfers.\""
															},
															"value": "Need operator approval for 3rd party transfers."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be",
																"typeString": "literal_string \"Need operator approval for 3rd party transfers.\""
															}
														],
														"id": 107,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "3020:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3020:126:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "3020:126:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 124,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "3271:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(uint256 => mapping(address => uint256))"
																}
															},
															"id": 127,
															"indexExpression": {
																"argumentTypes": null,
																"id": 125,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 91,
																"src": "3280:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3271:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 128,
														"indexExpression": {
															"argumentTypes": null,
															"id": 126,
															"name": "_from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "3285:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3271:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 135,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 93,
																"src": "3319:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 129,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 52,
																		"src": "3294:8:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(uint256 => mapping(address => uint256))"
																		}
																	},
																	"id": 131,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 130,
																		"name": "_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 91,
																		"src": "3303:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3294:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 133,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 132,
																	"name": "_from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 87,
																	"src": "3308:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3294:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 134,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 716,
															"src": "3294:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 136,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3294:32:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3271:55:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 138,
												"nodeType": "ExpressionStatement",
												"src": "3271:55:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 139,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 52,
																"src": "3336:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(uint256 => mapping(address => uint256))"
																}
															},
															"id": 142,
															"indexExpression": {
																"argumentTypes": null,
																"id": 140,
																"name": "_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 91,
																"src": "3345:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3336:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 143,
														"indexExpression": {
															"argumentTypes": null,
															"id": 141,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "3350:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3336:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 146,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 52,
																		"src": "3370:8:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(uint256 => mapping(address => uint256))"
																		}
																	},
																	"id": 148,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 147,
																		"name": "_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 91,
																		"src": "3379:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3370:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 150,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 149,
																	"name": "_to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 89,
																	"src": "3384:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3370:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 144,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 93,
																"src": "3359:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 740,
															"src": "3359:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3359:30:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3336:53:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 153,
												"nodeType": "ExpressionStatement",
												"src": "3336:53:2"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 155,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "3447:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3447:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 157,
															"name": "_from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "3459:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 158,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "3466:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 159,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 91,
															"src": "3471:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 160,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 93,
															"src": "3476:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 154,
														"name": "TransferSingle",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 518,
														"src": "3432:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3432:51:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "EmitStatement",
												"src": "3427:56:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"id": 163,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "3636:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 164,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 17,
														"src": "3636:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3636:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 177,
												"nodeType": "IfStatement",
												"src": "3632:121:2",
												"trueBody": {
													"id": 176,
													"nodeType": "Block",
													"src": "3654:99:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 167,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 756,
																			"src": "3699:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "3699:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 169,
																		"name": "_from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 87,
																		"src": "3711:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 170,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 89,
																		"src": "3718:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 171,
																		"name": "_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 91,
																		"src": "3723:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 172,
																		"name": "_value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 93,
																		"src": "3728:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 173,
																		"name": "_data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 95,
																		"src": "3736:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"id": 166,
																	"name": "_doSafeTransferAcceptanceCheck",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 458,
																	"src": "3668:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (address,address,address,uint256,uint256,bytes memory)"
																	}
																},
																"id": 174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3668:74:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 175,
															"nodeType": "ExpressionStatement",
															"src": "3668:74:2"
														}
													]
												}
											}
										]
									},
									"documentation": "@notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n@dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\nMUST revert if `_to` is the zero address.\nMUST revert if balance of holder for token `_id` is lower than the `_value` sent.\nMUST revert on any other error.\nMUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\nAfter the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n@param _from    Source address\n@param _to      Target address\n@param _id      ID of the token type\n@param _value   Transfer amount\n@param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`",
									"id": 179,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2858:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2873:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2873:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2886:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2886:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2899:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 92,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2899:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "2915:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 94,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2915:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2857:79:2"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2946:0:2"
									},
									"scope": 493,
									"src": "2832:927:2",
									"stateMutability": "nonpayable",
									"superFunction": 559,
									"visibility": "external"
								},
								{
									"body": {
										"id": 308,
										"nodeType": "Block",
										"src": "5532:1625:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 195,
																"name": "_to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "5583:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "307830",
																		"id": 197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5598:3:2",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0x0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5590:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 198,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5590:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "5583:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "64657374696e6174696f6e2061646472657373206d757374206265206e6f6e2d7a65726f2e",
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5604:39:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_62feaa226fe2bab79230d856b8132c73f9553fb9f97b507f32473583a3bdc412",
																"typeString": "literal_string \"destination address must be non-zero.\""
															},
															"value": "destination address must be non-zero."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_62feaa226fe2bab79230d856b8132c73f9553fb9f97b507f32473583a3bdc412",
																"typeString": "literal_string \"destination address must be non-zero.\""
															}
														],
														"id": 194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "5575:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5575:69:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 202,
												"nodeType": "ExpressionStatement",
												"src": "5575:69:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 204,
																	"name": "_ids",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "5662:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "5662:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 206,
																	"name": "_values",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "5677:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "5677:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5662:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5f69647320616e64205f76616c756573206172726179206c656e677468206d757374206d617463682e",
															"id": 209,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5693:43:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d06b0e7fc248df96a03d3f6210ab25cdbd58ba1e3989c7aed9df538ab45fc969",
																"typeString": "literal_string \"_ids and _values array length must match.\""
															},
															"value": "_ids and _values array length must match."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d06b0e7fc248df96a03d3f6210ab25cdbd58ba1e3989c7aed9df538ab45fc969",
																"typeString": "literal_string \"_ids and _values array length must match.\""
															}
														],
														"id": 203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "5654:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5654:83:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "5654:83:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 213,
																	"name": "_from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 181,
																	"src": "5755:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 214,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 756,
																		"src": "5764:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 215,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "5764:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "5755:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 217,
																			"name": "operatorApproval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 58,
																			"src": "5778:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																				"typeString": "mapping(address => mapping(address => bool))"
																			}
																		},
																		"id": 219,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 218,
																			"name": "_from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 181,
																			"src": "5795:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5778:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 222,
																	"indexExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 220,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 756,
																			"src": "5802:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 221,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "5802:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5778:35:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 223,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5817:4:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5778:43:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5755:66:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e73666572732e",
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5823:49:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be",
																"typeString": "literal_string \"Need operator approval for 3rd party transfers.\""
															},
															"value": "Need operator approval for 3rd party transfers."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_849b4236b9cc0954dc0e729ab0ed3552779085d502d2b1dad4e899fd8211d4be",
																"typeString": "literal_string \"Need operator approval for 3rd party transfers.\""
															}
														],
														"id": 212,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "5747:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5747:126:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 228,
												"nodeType": "ExpressionStatement",
												"src": "5747:126:2"
											},
											{
												"body": {
													"id": 282,
													"nodeType": "Block",
													"src": "5926:338:2",
													"statements": [
														{
															"assignments": [
																241
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 241,
																	"name": "id",
																	"nodeType": "VariableDeclaration",
																	"scope": 282,
																	"src": "5940:10:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 240,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5940:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 245,
															"initialValue": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 242,
																	"name": "_ids",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "5953:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 244,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 243,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 230,
																	"src": "5958:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5953:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5940:20:2"
														},
														{
															"assignments": [
																247
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 247,
																	"name": "value",
																	"nodeType": "VariableDeclaration",
																	"scope": 282,
																	"src": "5974:13:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 246,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5974:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 251,
															"initialValue": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 248,
																	"name": "_values",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "5990:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 250,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 249,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 230,
																	"src": "5998:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5990:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5974:26:2"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 252,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 52,
																			"src": "6137:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(uint256 => mapping(address => uint256))"
																			}
																		},
																		"id": 255,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 253,
																			"name": "id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 241,
																			"src": "6146:2:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6137:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 256,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 254,
																		"name": "_from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 181,
																		"src": "6150:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6137:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 263,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 247,
																			"src": "6183:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"baseExpression": {
																					"argumentTypes": null,
																					"id": 257,
																					"name": "balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 52,
																					"src": "6159:8:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																						"typeString": "mapping(uint256 => mapping(address => uint256))"
																					}
																				},
																				"id": 259,
																				"indexExpression": {
																					"argumentTypes": null,
																					"id": 258,
																					"name": "id",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 241,
																					"src": "6168:2:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6159:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 261,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 260,
																				"name": "_from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 181,
																				"src": "6172:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6159:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 262,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 716,
																		"src": "6159:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 264,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6159:30:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6137:52:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 266,
															"nodeType": "ExpressionStatement",
															"src": "6137:52:2"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 280,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 267,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 52,
																			"src": "6203:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(uint256 => mapping(address => uint256))"
																			}
																		},
																		"id": 270,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 268,
																			"name": "id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 241,
																			"src": "6212:2:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6203:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 271,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 269,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 183,
																		"src": "6216:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "6203:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"baseExpression": {
																					"argumentTypes": null,
																					"id": 274,
																					"name": "balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 52,
																					"src": "6235:8:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																						"typeString": "mapping(uint256 => mapping(address => uint256))"
																					}
																				},
																				"id": 276,
																				"indexExpression": {
																					"argumentTypes": null,
																					"id": 275,
																					"name": "id",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 241,
																					"src": "6244:2:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "6235:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 278,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 277,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 183,
																				"src": "6248:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6235:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"id": 272,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 247,
																			"src": "6225:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 273,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 740,
																		"src": "6225:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6225:28:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6203:50:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 281,
															"nodeType": "ExpressionStatement",
															"src": "6203:50:2"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 233,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 230,
														"src": "5904:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 234,
															"name": "_ids",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 186,
															"src": "5908:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														},
														"id": 235,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "5908:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5904:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 283,
												"initializationExpression": {
													"assignments": [
														230
													],
													"declarations": [
														{
															"constant": false,
															"id": 230,
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 283,
															"src": "5889:9:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 229,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5889:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 232,
													"initialValue": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 231,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5901:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5889:13:2"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 238,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "5921:3:2",
														"subExpression": {
															"argumentTypes": null,
															"id": 237,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "5923:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 239,
													"nodeType": "ExpressionStatement",
													"src": "5921:3:2"
												},
												"nodeType": "ForStatement",
												"src": "5884:380:2"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 285,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "6828:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "6828:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 287,
															"name": "_from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "6840:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 288,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "6847:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 289,
															"name": "_ids",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 186,
															"src": "6852:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														},
														{
															"argumentTypes": null,
															"id": 290,
															"name": "_values",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "6858:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														],
														"id": 284,
														"name": "TransferBatch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "6814:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address,address,address,uint256[] memory,uint256[] memory)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6814:52:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 292,
												"nodeType": "EmitStatement",
												"src": "6809:57:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"argumentTypes": null,
															"id": 293,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 183,
															"src": "7027:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 294,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 17,
														"src": "7027:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7027:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 307,
												"nodeType": "IfStatement",
												"src": "7023:128:2",
												"trueBody": {
													"id": 306,
													"nodeType": "Block",
													"src": "7045:106:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 297,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 756,
																			"src": "7095:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "7095:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 299,
																		"name": "_from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 181,
																		"src": "7107:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 300,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 183,
																		"src": "7114:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 301,
																		"name": "_ids",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 186,
																		"src": "7119:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 302,
																		"name": "_values",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 189,
																		"src": "7125:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 303,
																		"name": "_data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 191,
																		"src": "7134:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		},
																		{
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"id": 296,
																	"name": "_doSafeBatchTransferAcceptanceCheck",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 492,
																	"src": "7059:35:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"
																	}
																},
																"id": 304,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7059:81:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 305,
															"nodeType": "ExpressionStatement",
															"src": "7059:81:2"
														}
													]
												}
											}
										]
									},
									"documentation": "@notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n@dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\nMUST revert if `_to` is the zero address.\nMUST revert if length of `_ids` is not the same as length of `_values`.\nMUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\nMUST revert on any other error.\nMUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\nBalance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\nAfter the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n@param _from    Source address\n@param _to      Target address\n@param _ids     IDs of each token type (order and length must match _values array)\n@param _values  Transfer amounts per token type (order and length must match _ids array)\n@param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`",
									"id": 309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeBatchTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "5420:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5420:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "5435:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5435:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "5448:23:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 184,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5448:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 185,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "5448:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 189,
												"name": "_values",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "5473:26:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 187,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5473:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 188,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "5473:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "5501:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 190,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5501:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5419:103:2"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5532:0:2"
									},
									"scope": 493,
									"src": "5389:1768:2",
									"stateMutability": "nonpayable",
									"superFunction": 574,
									"visibility": "external"
								},
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "7481:289:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 318,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 52,
															"src": "7742:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(uint256 => mapping(address => uint256))"
															}
														},
														"id": 320,
														"indexExpression": {
															"argumentTypes": null,
															"id": 319,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "7751:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7742:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 322,
													"indexExpression": {
														"argumentTypes": null,
														"id": 321,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 311,
														"src": "7756:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7742:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 317,
												"id": 323,
												"nodeType": "Return",
												"src": "7735:28:2"
											}
										]
									},
									"documentation": "@notice Get the balance of an account's Tokens.\n@param _owner  The address of the token holder\n@param _id     ID of the Token\n@return        The _owner's balance of the Token type requested",
									"id": 325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "7420:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7420:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "7436:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7436:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7419:29:2"
									},
									"returnParameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "7472:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7472:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7471:9:2"
									},
									"scope": 493,
									"src": "7401:369:2",
									"stateMutability": "view",
									"superFunction": 583,
									"visibility": "external"
								},
								{
									"body": {
										"id": 385,
										"nodeType": "Block",
										"src": "8187:276:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 338,
																	"name": "_owners",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "8206:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "8206:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 340,
																	"name": "_ids",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 331,
																	"src": "8224:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "8224:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8206:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 337,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 759,
														"src": "8198:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8198:38:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "ExpressionStatement",
												"src": "8198:38:2"
											},
											{
												"assignments": [
													348
												],
												"declarations": [
													{
														"constant": false,
														"id": 348,
														"name": "balances_",
														"nodeType": "VariableDeclaration",
														"scope": 385,
														"src": "8247:26:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 346,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8247:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 347,
															"length": null,
															"nodeType": "ArrayTypeName",
															"src": "8247:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 355,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 352,
																"name": "_owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "8290:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																	"typeString": "address[] calldata"
																}
															},
															"id": 353,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "8290:14:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 351,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "8276:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
															"typeString": "function (uint256) pure returns (uint256[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 349,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8280:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 350,
															"length": null,
															"nodeType": "ArrayTypeName",
															"src": "8280:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8276:29:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8247:58:2"
											},
											{
												"body": {
													"id": 381,
													"nodeType": "Block",
													"src": "8361:69:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 367,
																		"name": "balances_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 348,
																		"src": "8375:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 369,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 368,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 357,
																		"src": "8385:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8375:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 370,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 52,
																			"src": "8390:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(uint256 => mapping(address => uint256))"
																			}
																		},
																		"id": 374,
																		"indexExpression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 371,
																				"name": "_ids",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 331,
																				"src": "8399:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																					"typeString": "uint256[] calldata"
																				}
																			},
																			"id": 373,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 372,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 357,
																				"src": "8404:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8399:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8390:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 378,
																	"indexExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 375,
																			"name": "_owners",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 328,
																			"src": "8408:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 377,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 376,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 357,
																			"src": "8416:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8408:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8390:29:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8375:44:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 380,
															"nodeType": "ExpressionStatement",
															"src": "8375:44:2"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 360,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 357,
														"src": "8336:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 361,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 328,
															"src": "8340:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															}
														},
														"id": 362,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "8340:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8336:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 382,
												"initializationExpression": {
													"assignments": [
														357
													],
													"declarations": [
														{
															"constant": false,
															"id": 357,
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 382,
															"src": "8321:9:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 356,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8321:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 359,
													"initialValue": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 358,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8333:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "8321:13:2"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 365,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "8356:3:2",
														"subExpression": {
															"argumentTypes": null,
															"id": 364,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "8358:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 366,
													"nodeType": "ExpressionStatement",
													"src": "8356:3:2"
												},
												"nodeType": "ForStatement",
												"src": "8316:114:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 383,
													"name": "balances_",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 348,
													"src": "8447:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 336,
												"id": 384,
												"nodeType": "Return",
												"src": "8440:16:2"
											}
										]
									},
									"documentation": "@notice Get the balance of multiple account/token pairs\n@param _owners The addresses of the token holders\n@param _ids    ID of the Tokens\n@return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)",
									"id": 386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfBatch",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"name": "_owners",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "8093:26:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 326,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8093:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 327,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "8093:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "8121:23:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 329,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "8121:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 330,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "8121:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8092:53:2"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "8169:16:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 333,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "8169:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 334,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "8169:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8168:18:2"
									},
									"scope": 493,
									"src": "8069:394:2",
									"stateMutability": "view",
									"superFunction": 595,
									"visibility": "external"
								},
								{
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "8888:131:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 393,
																"name": "operatorApproval",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 58,
																"src": "8898:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 397,
															"indexExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 394,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 756,
																	"src": "8915:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 395,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "8915:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8898:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 398,
														"indexExpression": {
															"argumentTypes": null,
															"id": 396,
															"name": "_operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "8927:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8898:39:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 399,
														"name": "_approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 390,
														"src": "8940:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8898:51:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "8898:51:2"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 403,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "8979:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "8979:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 405,
															"name": "_operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "8991:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 406,
															"name": "_approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "9002:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 402,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "8964:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8964:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 408,
												"nodeType": "EmitStatement",
												"src": "8959:53:2"
											}
										]
									},
									"documentation": "@notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n@dev MUST emit the ApprovalForAll event on success.\n@param _operator  Address to add to the set of authorized operators\n@param _approved  True if the operator is approved, false to revoke approval",
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "8844:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8844:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "8863:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 389,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8863:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8843:35:2"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8888:0:2"
									},
									"scope": 493,
									"src": "8817:202:2",
									"stateMutability": "nonpayable",
									"superFunction": 602,
									"visibility": "external"
								},
								{
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "9388:59:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 419,
															"name": "operatorApproval",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 58,
															"src": "9405:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 421,
														"indexExpression": {
															"argumentTypes": null,
															"id": 420,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "9422:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9405:24:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 423,
													"indexExpression": {
														"argumentTypes": null,
														"id": 422,
														"name": "_operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "9430:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9405:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 418,
												"id": 424,
												"nodeType": "Return",
												"src": "9398:42:2"
											}
										]
									},
									"documentation": "@notice Queries the approval status of an operator for a given owner.\n@param _owner     The owner of the Tokens\n@param _operator  Address of authorized operator\n@return           True if the operator is approved, false if not",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "9324:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9324:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "9340:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9340:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9323:35:2"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "9382:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 416,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9382:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9381:6:2"
									},
									"scope": 493,
									"src": "9298:149:2",
									"stateMutability": "view",
									"superFunction": 611,
									"visibility": "external"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "9699:983:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 446,
																		"name": "_operator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "10556:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 447,
																		"name": "_from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 430,
																		"src": "10567:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 448,
																		"name": "_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 434,
																		"src": "10574:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 449,
																		"name": "_value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 436,
																		"src": "10579:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 450,
																		"name": "_data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 438,
																		"src": "10587:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 443,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 432,
																				"src": "10533:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 442,
																			"name": "ERC1155TokenReceiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 647,
																			"src": "10512:20:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_ERC1155TokenReceiver_$647_$",
																				"typeString": "type(contract ERC1155TokenReceiver)"
																			}
																		},
																		"id": 444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10512:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ERC1155TokenReceiver_$647",
																			"typeString": "contract ERC1155TokenReceiver"
																		}
																	},
																	"id": 445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "onERC1155Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 629,
																	"src": "10512:43:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 451,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10512:81:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 452,
																"name": "ERC1155_ACCEPTED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "10597:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "10512:101:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564",
															"id": 454,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10615:59:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef98af68c848abc187fba39b58082936b9de327b8b5fd25aacd07d63c4d89e42",
																"typeString": "literal_string \"contract returned an unknown value from onERC1155Received\""
															},
															"value": "contract returned an unknown value from onERC1155Received"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef98af68c848abc187fba39b58082936b9de327b8b5fd25aacd07d63c4d89e42",
																"typeString": "literal_string \"contract returned an unknown value from onERC1155Received\""
															}
														],
														"id": 441,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "10504:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10504:171:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 456,
												"nodeType": "ExpressionStatement",
												"src": "10504:171:2"
											}
										]
									},
									"documentation": "//////////////////////////////////////// Internal //////////////////////////////////////////////",
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_doSafeTransferAcceptanceCheck",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "9594:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 427,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9594:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "9613:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9613:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "9628:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 431,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9628:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "9641:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9641:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "9654:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9654:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "9670:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 437,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9670:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9593:96:2"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9699:0:2"
									},
									"scope": 493,
									"src": "9554:1128:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "10858:1011:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 487,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 480,
																		"name": "_operator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 460,
																		"src": "11730:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 481,
																		"name": "_from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 462,
																		"src": "11741:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 482,
																		"name": "_ids",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 467,
																		"src": "11748:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 483,
																		"name": "_values",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 470,
																		"src": "11754:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 484,
																		"name": "_data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 472,
																		"src": "11763:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		},
																		{
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 477,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 464,
																				"src": "11702:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 476,
																			"name": "ERC1155TokenReceiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 647,
																			"src": "11681:20:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_ERC1155TokenReceiver_$647_$",
																				"typeString": "type(contract ERC1155TokenReceiver)"
																			}
																		},
																		"id": 478,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11681:25:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ERC1155TokenReceiver_$647",
																			"typeString": "contract ERC1155TokenReceiver"
																		}
																	},
																	"id": 479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "onERC1155BatchReceived",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 646,
																	"src": "11681:48:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 485,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11681:88:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 486,
																"name": "ERC1155_BATCH_ACCEPTED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "11773:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "11681:114:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "636f6e74726163742072657475726e656420616e20756e6b6e6f776e2076616c75652066726f6d206f6e4552433131353542617463685265636569766564",
															"id": 488,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11797:64:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_907b1bc15e21fe4233c673581af2cf868cd5fa614b6015b432ff41fbc0222bad",
																"typeString": "literal_string \"contract returned an unknown value from onERC1155BatchReceived\""
															},
															"value": "contract returned an unknown value from onERC1155BatchReceived"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_907b1bc15e21fe4233c673581af2cf868cd5fa614b6015b432ff41fbc0222bad",
																"typeString": "literal_string \"contract returned an unknown value from onERC1155BatchReceived\""
															}
														],
														"id": 475,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															759,
															760
														],
														"referencedDeclaration": 760,
														"src": "11673:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11673:189:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 490,
												"nodeType": "ExpressionStatement",
												"src": "11673:189:2"
											}
										]
									},
									"documentation": null,
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_doSafeBatchTransferAcceptanceCheck",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "10733:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "10752:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10752:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "10767:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10767:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 467,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "10780:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 465,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "10780:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 466,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "10780:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"name": "_values",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "10803:24:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 468,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "10803:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 469,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "10803:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 472,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "10829:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 471,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10829:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10732:116:2"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10858:0:2"
									},
									"scope": 493,
									"src": "10688:1181:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 494,
							"src": "214:11657:2"
						}
					],
					"src": "0:11872:2"
				},
				"id": 2
			},
			"contracts/ERC165.sol": {
				"ast": {
					"absolutePath": "contracts/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							503
						]
					},
					"id": 504,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 495,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:3"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": "@title ERC165\n@dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md",
							"fullyImplemented": false,
							"id": 503,
							"linearizedBaseContracts": [
								503
							],
							"name": "ERC165",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": "@notice Query if a contract implements an interface\n@param _interfaceId The interface identifier, as specified in ERC-165\n@dev Interface identification is specified in ERC-165. This function\nuses less than 30,000 gas.",
									"id": 502,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"name": "_interfaceId",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "433:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 496,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "433:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "432:21:3"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "489:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 499,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "489:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "488:6:3"
									},
									"scope": 503,
									"src": "406:89:3",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 504,
							"src": "120:377:3"
						}
					],
					"src": "0:498:3"
				},
				"id": 3
			},
			"contracts/IERC1155.sol": {
				"ast": {
					"absolutePath": "contracts/IERC1155.sol",
					"exportedSymbols": {
						"IERC1155": [
							612
						]
					},
					"id": 613,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 505,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:4"
						},
						{
							"absolutePath": "contracts/ERC165.sol",
							"file": "./ERC165.sol",
							"id": 506,
							"nodeType": "ImportDirective",
							"scope": 613,
							"sourceUnit": 504,
							"src": "25:22:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": "@title ERC-1155 Multi Token Standard\n@dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\nNote: The ERC-165 identifier for this interface is 0xd9b67a26.",
							"fullyImplemented": false,
							"id": 612,
							"linearizedBaseContracts": [
								612
							],
							"name": "IERC1155",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": "@dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\nThe `_operator` argument MUST be msg.sender.\nThe `_from` argument MUST be the address of the holder whose balance is decreased.\nThe `_to` argument MUST be the address of the recipient whose balance is increased.\nThe `_id` argument MUST be the token type being transferred.\nThe `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\nWhen minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\nWhen burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).",
									"id": 518,
									"name": "TransferSingle",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 508,
												"indexed": true,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1181:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1181:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"indexed": true,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1208:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1208:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"indexed": true,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1231:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1231:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"indexed": false,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1252:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1252:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"indexed": false,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 518,
												"src": "1265:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 515,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1180:100:4"
									},
									"src": "1160:121:4"
								},
								{
									"anonymous": false,
									"documentation": "@dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \"Safe Transfer Rules\" section of the standard).\nThe `_operator` argument MUST be msg.sender.\nThe `_from` argument MUST be the address of the holder whose balance is decreased.\nThe `_to` argument MUST be the address of the recipient whose balance is increased.\nThe `_ids` argument MUST be the list of tokens being transferred.\nThe `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\nWhen minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\nWhen burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).",
									"id": 532,
									"name": "TransferBatch",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "2258:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2258:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"indexed": true,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "2285:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2285:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"indexed": true,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "2308:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": false,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "2329:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 525,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2329:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 526,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "2329:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"indexed": false,
												"name": "_values",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "2345:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 528,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2345:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 529,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "2345:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2257:106:4"
									},
									"src": "2238:126:4"
								},
								{
									"anonymous": false,
									"documentation": "@dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).",
									"id": 540,
									"name": "ApprovalForAll",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"indexed": true,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "2584:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2584:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "2608:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2608:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": false,
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "2635:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2635:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2583:67:4"
									},
									"src": "2563:88:4"
								},
								{
									"anonymous": false,
									"documentation": "@dev MUST emit when the URI is updated for a token ID.\nURIs are defined in RFC 3986.\nThe URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata URI JSON Schema\".",
									"id": 546,
									"name": "URI",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 542,
												"indexed": false,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2880:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 541,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2880:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"indexed": true,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "2895:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2895:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2879:36:4"
									},
									"src": "2870:46:4"
								},
								{
									"body": null,
									"documentation": "@notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n@dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\nMUST revert if `_to` is the zero address.\nMUST revert if balance of holder for token `_id` is lower than the `_value` sent.\nMUST revert on any other error.\nMUST emit the `TransferSingle` event to reflect the balance change (see \"Safe Transfer Rules\" section of the standard).\nAfter the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n@param _from    Source address\n@param _to      Target address\n@param _id      ID of the token type\n@param _value   Transfer amount\n@param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`",
									"id": 559,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 548,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4082:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4082:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4097:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4097:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 552,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4110:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 551,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4110:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 554,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4123:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4123:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 556,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4139:20:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 555,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4139:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4081:79:4"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4169:0:4"
									},
									"scope": 612,
									"src": "4056:114:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n@dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \"Approval\" section of the standard).\nMUST revert if `_to` is the zero address.\nMUST revert if length of `_ids` is not the same as length of `_values`.\nMUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\nMUST revert on any other error.\nMUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \"Safe Transfer Rules\" section of the standard).\nBalance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\nAfter the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \"Safe Transfer Rules\" section of the standard).\n@param _from    Source address\n@param _to      Target address\n@param _ids     IDs of each token type (order and length must match _values array)\n@param _values  Transfer amounts per token type (order and length must match _ids array)\n@param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`",
									"id": 574,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeBatchTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "5831:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5831:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "5846:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5846:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "5859:23:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 564,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5859:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 565,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "5859:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"name": "_values",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "5884:26:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 567,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5884:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 568,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "5884:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 571,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "5912:20:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 570,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5912:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5830:103:4"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5942:0:4"
									},
									"scope": 612,
									"src": "5800:143:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@notice Get the balance of an account's Tokens.\n@param _owner  The address of the token holder\n@param _id     ID of the Token\n@return        The _owner's balance of the Token type requested",
									"id": 583,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "6206:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "6222:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 577,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6222:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6205:29:4"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "6258:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 580,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6258:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6257:9:4"
									},
									"scope": 612,
									"src": "6187:80:4",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@notice Get the balance of multiple account/token pairs\n@param _owners The addresses of the token holders\n@param _ids    ID of the Tokens\n@return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)",
									"id": 595,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfBatch",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"name": "_owners",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "6589:26:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 584,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "6589:7:4",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 585,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "6589:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "6617:23:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 587,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6617:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 588,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "6617:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6588:53:4"
									},
									"returnParameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 595,
												"src": "6665:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 591,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6665:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 592,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "6665:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6664:18:4"
									},
									"scope": 612,
									"src": "6565:118:4",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n@dev MUST emit the ApprovalForAll event on success.\n@param _operator  Address to add to the set of authorized operators\n@param _approved  True if the operator is approved, false to revoke approval",
									"id": 602,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "7064:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7064:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 599,
												"name": "_approved",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "7083:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 598,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7083:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7063:35:4"
									},
									"returnParameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7107:0:4"
									},
									"scope": 612,
									"src": "7037:71:4",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@notice Queries the approval status of an operator for a given owner.\n@param _owner     The owner of the Tokens\n@param _operator  Address of authorized operator\n@return           True if the operator is approved, false if not",
									"id": 611,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "7413:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7413:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "7429:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 605,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7429:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7412:35:4"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "7471:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 608,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7471:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7470:6:4"
									},
									"scope": 612,
									"src": "7387:90:4",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 613,
							"src": "240:7239:4"
						}
					],
					"src": "0:7480:4"
				},
				"id": 4
			},
			"contracts/IERC1155TokenReceiver.sol": {
				"ast": {
					"absolutePath": "contracts/IERC1155TokenReceiver.sol",
					"exportedSymbols": {
						"ERC1155TokenReceiver": [
							647
						]
					},
					"id": 648,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 614,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:5"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": "Note: The ERC-165 identifier for this interface is 0x4e2312e0.",
							"fullyImplemented": false,
							"id": 647,
							"linearizedBaseContracts": [
								647
							],
							"name": "ERC1155TokenReceiver",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": "@notice Handle the receipt of a single ERC1155 token type.\n@dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\nThis function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\nThis function MUST revert if it rejects the transfer.\nReturn of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n@param _operator  The address which initiated the transfer (i.e. msg.sender)\n@param _from      The address which previously owned the token\n@param _id        The ID of the token being transferred\n@param _value     The amount of tokens being transferred\n@param _data      Additional data with no specified format\n@return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`",
									"id": 629,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC1155Received",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "1243:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "1262:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1262:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 620,
												"name": "_id",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "1277:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1277:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 622,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "1290:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 621,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1290:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 624,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "1306:20:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 623,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1306:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1242:85:5"
									},
									"returnParameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 627,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 629,
												"src": "1345:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 626,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1345:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1344:8:5"
									},
									"scope": 647,
									"src": "1216:137:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@notice Handle the receipt of multiple ERC1155 token types.\n@dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\nThis function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\nThis function MUST revert if it rejects the transfer(s).\nReturn of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n@param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n@param _from      The address which previously owned the token\n@param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n@param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n@param _data      Additional data with no specified format\n@return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`",
									"id": 646,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC1155BatchReceived",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 631,
												"name": "_operator",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "2633:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2633:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "2652:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"name": "_ids",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "2667:23:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 634,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2667:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 635,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "2667:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 639,
												"name": "_values",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "2692:26:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 637,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2692:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 638,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "2692:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "2720:20:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 640,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2720:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2632:109:5"
									},
									"returnParameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "2759:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 643,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2759:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2758:8:5"
									},
									"scope": 647,
									"src": "2601:166:5",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 648,
							"src": "99:2670:5"
						}
					],
					"src": "0:2770:5"
				},
				"id": 5
			},
			"contracts/SafeMath.sol": {
				"ast": {
					"absolutePath": "contracts/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							741
						]
					},
					"id": 742,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 649,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:6"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@title SafeMath\n@dev Math operations with safety checks that throw on error",
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 681,
										"nodeType": "Block",
										"src": "279:344:6",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 658,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 651,
														"src": "510:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 659,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "515:1:6",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "510:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 664,
												"nodeType": "IfStatement",
												"src": "506:45:6",
												"trueBody": {
													"id": 663,
													"nodeType": "Block",
													"src": "518:33:6",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "539:1:6",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 657,
															"id": 662,
															"nodeType": "Return",
															"src": "532:8:6"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 665,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 656,
														"src": "561:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 668,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 666,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "565:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"argumentTypes": null,
															"id": 667,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "569:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "565:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "561:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "561:9:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 672,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 656,
																	"src": "587:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 673,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 651,
																	"src": "591:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "587:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 675,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 653,
																"src": "596:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "587:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 671,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 745,
														"src": "580:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "580:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 678,
												"nodeType": "ExpressionStatement",
												"src": "580:18:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 679,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 656,
													"src": "615:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 657,
												"id": 680,
												"nodeType": "Return",
												"src": "608:8:6"
											}
										]
									},
									"documentation": "@dev Multiplies two numbers, throws on overflow.",
									"id": 682,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "223:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "223:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 653,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "234:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "234:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "222:22:6"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"name": "c",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "268:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "268:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "267:11:6"
									},
									"scope": 741,
									"src": "210:413:6",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 695,
										"nodeType": "Block",
										"src": "780:223:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 691,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 684,
														"src": "991:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 692,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 686,
														"src": "995:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "991:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 690,
												"id": 694,
												"nodeType": "Return",
												"src": "984:12:6"
											}
										]
									},
									"documentation": "@dev Integer division of two numbers, truncating the quotient.",
									"id": 696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "726:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "726:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "737:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "737:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "725:22:6"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "771:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "771:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "770:9:6"
									},
									"scope": 741,
									"src": "713:290:6",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 715,
										"nodeType": "Block",
										"src": "1190:53:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 706,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 700,
																"src": "1207:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 707,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 698,
																"src": "1212:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1207:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 705,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 745,
														"src": "1200:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1200:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 710,
												"nodeType": "ExpressionStatement",
												"src": "1200:14:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 711,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "1231:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 712,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 700,
														"src": "1235:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1231:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 704,
												"id": 714,
												"nodeType": "Return",
												"src": "1224:12:6"
											}
										]
									},
									"documentation": "@dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).",
									"id": 716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "1136:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 700,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "1147:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1147:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1135:22:6"
									},
									"returnParameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 703,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "1181:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1181:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1180:9:6"
									},
									"scope": 741,
									"src": "1123:120:6",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "1382:68:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 725,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "1392:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 728,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 726,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 718,
															"src": "1396:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"argumentTypes": null,
															"id": 727,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "1400:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1396:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1392:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 730,
												"nodeType": "ExpressionStatement",
												"src": "1392:9:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 732,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 723,
																"src": "1418:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 733,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "1423:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1418:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 731,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 745,
														"src": "1411:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1411:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 736,
												"nodeType": "ExpressionStatement",
												"src": "1411:14:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 737,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 723,
													"src": "1442:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 724,
												"id": 738,
												"nodeType": "Return",
												"src": "1435:8:6"
											}
										]
									},
									"documentation": "@dev Adds two numbers, throws on overflow.",
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1326:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1337:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1337:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1325:22:6"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"name": "c",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1371:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1371:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1370:11:6"
									},
									"scope": 741,
									"src": "1313:137:6",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "116:1336:6"
						}
					],
					"src": "0:1453:6"
				},
				"id": 6
			}
		}
	}
}